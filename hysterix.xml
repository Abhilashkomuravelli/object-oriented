<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="com.netflix.hystrix.HystrixThreadPool" />
			<role name="FactoryMethod()" element="com.netflix.hystrix.HystrixThreadPool::getScheduler(rx.functions.Func0):rx.Scheduler" />
		</instance>
		<instance>
			<role name="Creator" element="com.netflix.hystrix.strategy.properties.HystrixDynamicProperties" />
			<role name="FactoryMethod()" element="com.netflix.hystrix.strategy.properties.HystrixDynamicProperties::getString(java.lang.String, java.lang.String):com.netflix.hystrix.strategy.properties.HystrixDynamicProperty" />
			<role name="FactoryMethod()" element="com.netflix.hystrix.strategy.properties.HystrixDynamicProperties::getInteger(java.lang.String, java.lang.Integer):com.netflix.hystrix.strategy.properties.HystrixDynamicProperty" />
			<role name="FactoryMethod()" element="com.netflix.hystrix.strategy.properties.HystrixDynamicProperties::getLong(java.lang.String, java.lang.Long):com.netflix.hystrix.strategy.properties.HystrixDynamicProperty" />
			<role name="FactoryMethod()" element="com.netflix.hystrix.strategy.properties.HystrixDynamicProperties::getBoolean(java.lang.String, java.lang.Boolean):com.netflix.hystrix.strategy.properties.HystrixDynamicProperty" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.commons.configuration.Configuration" />
			<role name="FactoryMethod()" element="org.apache.commons.configuration.Configuration::subset(java.lang.String):org.apache.commons.configuration.Configuration" />
		</instance>
		<instance>
			<role name="Creator" element="org.slf4j.IMarkerFactory" />
			<role name="FactoryMethod()" element="org.slf4j.IMarkerFactory::getMarker(java.lang.String):org.slf4j.Marker" />
			<role name="FactoryMethod()" element="org.slf4j.IMarkerFactory::getDetachedMarker(java.lang.String):org.slf4j.Marker" />
		</instance>
		<instance>
			<role name="Creator" element="rx.Scheduler$Worker" />
			<role name="FactoryMethod()" element="rx.Scheduler$Worker::schedule(rx.functions.Action0):rx.Subscription" />
			<role name="FactoryMethod()" element="rx.Scheduler$Worker::schedule(rx.functions.Action0, long, java.util.concurrent.TimeUnit):rx.Subscription" />
		</instance>
		<instance>
			<role name="Creator" element="rx.Scheduler" />
			<role name="FactoryMethod()" element="rx.Scheduler::createWorker():rx.Scheduler$Worker" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="com.netflix.config.ClasspathPropertiesConfiguration" />
			<role name="uniqueInstance" element="com.netflix.config.ClasspathPropertiesConfiguration::instance:com.netflix.config.ClasspathPropertiesConfiguration" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.config.DynamicPropertyFactory" />
			<role name="uniqueInstance" element="com.netflix.config.DynamicPropertyFactory::instance:com.netflix.config.DynamicPropertyFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.config.HystrixConfigurationStream" />
			<role name="uniqueInstance" element="com.netflix.hystrix.config.HystrixConfigurationStream::INSTANCE:com.netflix.hystrix.config.HystrixConfigurationStream" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.ExecutionResult" />
			<role name="uniqueInstance" element="com.netflix.hystrix.ExecutionResult::EMPTY:com.netflix.hystrix.ExecutionResult" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.HystrixCollapserProperties$Setter$TestHystrixCollapserKey" />
			<role name="uniqueInstance" element="com.netflix.hystrix.HystrixCollapserProperties$Setter$TestHystrixCollapserKey::TEST:com.netflix.hystrix.HystrixCollapserProperties$Setter$TestHystrixCollapserKey" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.HystrixCommandMetrics$HealthCounts" />
			<role name="uniqueInstance" element="com.netflix.hystrix.HystrixCommandMetrics$HealthCounts::EMPTY:com.netflix.hystrix.HystrixCommandMetrics$HealthCounts" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.metric.consumer.HystrixDashboardStream" />
			<role name="uniqueInstance" element="com.netflix.hystrix.metric.consumer.HystrixDashboardStream::INSTANCE:com.netflix.hystrix.metric.consumer.HystrixDashboardStream" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.metric.HystrixRequestEventsStream" />
			<role name="uniqueInstance" element="com.netflix.hystrix.metric.HystrixRequestEventsStream::INSTANCE:com.netflix.hystrix.metric.HystrixRequestEventsStream" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.metric.sample.HystrixUtilizationStream" />
			<role name="uniqueInstance" element="com.netflix.hystrix.metric.sample.HystrixUtilizationStream::INSTANCE:com.netflix.hystrix.metric.sample.HystrixUtilizationStream" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault::INSTANCE:com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategyDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifierDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifierDefault::INSTANCE:com.netflix.hystrix.strategy.eventnotifier.HystrixEventNotifierDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHookDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHookDefault::INSTANCE:com.netflix.hystrix.strategy.executionhook.HystrixCommandExecutionHookDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherDefault::INSTANCE:com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherFactory" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherFactory::SINGLETON:com.netflix.hystrix.strategy.metrics.HystrixMetricsPublisherFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategyDefault" />
			<role name="uniqueInstance" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategyDefault::INSTANCE:com.netflix.hystrix.strategy.properties.HystrixPropertiesStrategyDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.util.HystrixTimer" />
			<role name="uniqueInstance" element="com.netflix.hystrix.util.HystrixTimer::INSTANCE:com.netflix.hystrix.util.HystrixTimer" />
		</instance>
		<instance>
			<role name="Singleton" element="com.netflix.hystrix.util.PlatformSpecific" />
			<role name="uniqueInstance" element="com.netflix.hystrix.util.PlatformSpecific::INSTANCE:com.netflix.hystrix.util.PlatformSpecific" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.commons.configuration.beanutils.DefaultBeanFactory" />
			<role name="uniqueInstance" element="org.apache.commons.configuration.beanutils.DefaultBeanFactory::INSTANCE:org.apache.commons.configuration.beanutils.DefaultBeanFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.commons.configuration.FileSystem" />
			<role name="uniqueInstance" element="org.apache.commons.configuration.FileSystem::fileSystem:org.apache.commons.configuration.FileSystem" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField" />
			<role name="uniqueInstance" element="org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField::INSTANCE:org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField" />
			<role name="uniqueInstance" element="org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField::INSTANCE:org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField" />
			<role name="uniqueInstance" element="org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField::INSTANCE:org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.commons.logging.LogFactory" />
			<role name="uniqueInstance" element="org.apache.commons.logging.LogFactory::nullClassLoaderFactory:org.apache.commons.logging.LogFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="org.slf4j.helpers.FormattingTuple" />
			<role name="uniqueInstance" element="org.slf4j.helpers.FormattingTuple::NULL:org.slf4j.helpers.FormattingTuple" />
		</instance>
		<instance>
			<role name="Singleton" element="org.slf4j.helpers.NOPLogger" />
			<role name="uniqueInstance" element="org.slf4j.helpers.NOPLogger::NOP_LOGGER:org.slf4j.helpers.NOPLogger" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.BackpressureOverflow$DropLatest" />
			<role name="uniqueInstance" element="rx.BackpressureOverflow$DropLatest::INSTANCE:rx.BackpressureOverflow$DropLatest" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.BackpressureOverflow$DropOldest" />
			<role name="uniqueInstance" element="rx.BackpressureOverflow$DropOldest::INSTANCE:rx.BackpressureOverflow$DropOldest" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.BackpressureOverflow$Error" />
			<role name="uniqueInstance" element="rx.BackpressureOverflow$Error::INSTANCE:rx.BackpressureOverflow$Error" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.operators.EmptyObservableHolder" />
			<role name="uniqueInstance" element="rx.internal.operators.EmptyObservableHolder::INSTANCE:rx.internal.operators.EmptyObservableHolder" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.operators.NeverObservableHolder" />
			<role name="uniqueInstance" element="rx.internal.operators.NeverObservableHolder::INSTANCE:rx.internal.operators.NeverObservableHolder" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.operators.NotificationLite" />
			<role name="uniqueInstance" element="rx.internal.operators.NotificationLite::INSTANCE:rx.internal.operators.NotificationLite" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.operators.OnSubscribeDetach$TerminatedProducer" />
			<role name="uniqueInstance" element="rx.internal.operators.OnSubscribeDetach$TerminatedProducer::INSTANCE:rx.internal.operators.OnSubscribeDetach$TerminatedProducer" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.operators.OnSubscribeToMultimap$DefaultMultimapCollectionFactory" />
			<role name="uniqueInstance" element="rx.internal.operators.OnSubscribeToMultimap$DefaultMultimapCollectionFactory::INSTANCE:rx.internal.operators.OnSubscribeToMultimap$DefaultMultimapCollectionFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.operators.OperatorWindowWithTime$State" />
			<role name="uniqueInstance" element="rx.internal.operators.OperatorWindowWithTime$State::EMPTY:rx.internal.operators.OperatorWindowWithTime$State" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.schedulers.GenericScheduledExecutorService" />
			<role name="uniqueInstance" element="rx.internal.schedulers.GenericScheduledExecutorService::INSTANCE:rx.internal.schedulers.GenericScheduledExecutorService" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.schedulers.ImmediateScheduler" />
			<role name="uniqueInstance" element="rx.internal.schedulers.ImmediateScheduler::INSTANCE:rx.internal.schedulers.ImmediateScheduler" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.schedulers.TrampolineScheduler" />
			<role name="uniqueInstance" element="rx.internal.schedulers.TrampolineScheduler::INSTANCE:rx.internal.schedulers.TrampolineScheduler" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.subscriptions.Unsubscribed" />
			<role name="uniqueInstance" element="rx.internal.subscriptions.Unsubscribed::INSTANCE:rx.internal.subscriptions.Unsubscribed" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.util.UtilityFunctions$AlwaysFalse" />
			<role name="uniqueInstance" element="rx.internal.util.UtilityFunctions$AlwaysFalse::INSTANCE:rx.internal.util.UtilityFunctions$AlwaysFalse" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.internal.util.UtilityFunctions$AlwaysTrue" />
			<role name="uniqueInstance" element="rx.internal.util.UtilityFunctions$AlwaysTrue::INSTANCE:rx.internal.util.UtilityFunctions$AlwaysTrue" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.Notification" />
			<role name="uniqueInstance" element="rx.Notification::ON_COMPLETED:rx.Notification" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.plugins.RxJavaObservableExecutionHookDefault" />
			<role name="uniqueInstance" element="rx.plugins.RxJavaObservableExecutionHookDefault::INSTANCE:rx.plugins.RxJavaObservableExecutionHookDefault" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.plugins.RxJavaPlugins" />
			<role name="uniqueInstance" element="rx.plugins.RxJavaPlugins::INSTANCE:rx.plugins.RxJavaPlugins" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.plugins.RxJavaSchedulersHook" />
			<role name="uniqueInstance" element="rx.plugins.RxJavaSchedulersHook::DEFAULT_INSTANCE:rx.plugins.RxJavaSchedulersHook" />
		</instance>
		<instance>
			<role name="Singleton" element="rx.plugins.RxJavaSingleExecutionHookDefault" />
			<role name="uniqueInstance" element="rx.plugins.RxJavaSingleExecutionHookDefault::INSTANCE:rx.plugins.RxJavaSingleExecutionHookDefault" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adapter" element="rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber" />
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="adaptee" element="rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber::on:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber::call():void" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber" />
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="adaptee" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber::on:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber::accept(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.subjects.UnicastSubject$State" />
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="adaptee" element="rx.subjects.UnicastSubject$State::nl:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.subjects.UnicastSubject$State::onNext(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.observers.SerializedObserver" />
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="adaptee" element="rx.observers.SerializedObserver::nl:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.observers.SerializedObserver::onNext(T):void" />
			<role name="Request()" element="rx.observers.SerializedObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.observers.SerializedObserver::onCompleted():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.Subscriber" />
			<role name="Adapter" element="rx.internal.producers.SingleProducer" />
			<role name="adaptee" element="rx.internal.producers.SingleProducer::child:rx.Subscriber" />
			<role name="Request()" element="rx.internal.producers.SingleProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.Subscriber" />
			<role name="Adapter" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer" />
			<role name="adaptee" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::actual:rx.Subscriber" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::request(long):void" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::call():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.Subscriber" />
			<role name="Adapter" element="rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer" />
			<role name="adaptee" element="rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer::actual:rx.Subscriber" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.DeferredScalarSubscriber" />
			<role name="Adapter" element="rx.internal.operators.DeferredScalarSubscriber$InnerProducer" />
			<role name="adaptee" element="rx.internal.operators.DeferredScalarSubscriber$InnerProducer::parent:rx.internal.operators.DeferredScalarSubscriber" />
			<role name="Request()" element="rx.internal.operators.DeferredScalarSubscriber$InnerProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber" />
			<role name="Adapter" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerScalarProducer" />
			<role name="adaptee" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerScalarProducer::parent:rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapInnerScalarProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber" />
			<role name="Adapter" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer" />
			<role name="adaptee" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer::parent:rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.OperatorGroupBy$GroupBySubscriber" />
			<role name="Adapter" element="rx.internal.operators.OperatorGroupBy$GroupByProducer" />
			<role name="adaptee" element="rx.internal.operators.OperatorGroupBy$GroupByProducer::parent:rx.internal.operators.OperatorGroupBy$GroupBySubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorGroupBy$GroupByProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.OperatorMerge$MergeSubscriber" />
			<role name="Adapter" element="rx.internal.operators.OperatorMerge$MergeProducer" />
			<role name="adaptee" element="rx.internal.operators.OperatorMerge$MergeProducer::subscriber:rx.internal.operators.OperatorMerge$MergeSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorMerge$MergeProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subjects.SubjectSubscriptionManager" />
			<role name="Adapter" element="rx.subjects.AsyncSubject" />
			<role name="adaptee" element="rx.subjects.AsyncSubject::state:rx.subjects.SubjectSubscriptionManager" />
			<role name="Request()" element="rx.subjects.AsyncSubject::hasObservers():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subjects.SubjectSubscriptionManager" />
			<role name="Adapter" element="rx.subjects.BehaviorSubject" />
			<role name="adaptee" element="rx.subjects.BehaviorSubject::state:rx.subjects.SubjectSubscriptionManager" />
			<role name="Request()" element="rx.subjects.BehaviorSubject::hasObservers():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subjects.SubjectSubscriptionManager" />
			<role name="Adapter" element="rx.subjects.TestSubject" />
			<role name="adaptee" element="rx.subjects.TestSubject::state:rx.subjects.SubjectSubscriptionManager" />
			<role name="Request()" element="rx.subjects.TestSubject::hasObservers():boolean" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.subjects.ReplaySubject$ReplayProducer" />
			<role name="Adaptee" element="rx.subjects.ReplaySubject$ReplayState" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplayProducer::state:rx.subjects.ReplaySubject$ReplayState" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayProducer::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.Scheduler$Worker" />
			<role name="Adapter" element="rx.internal.schedulers.SleepingAction" />
			<role name="adaptee" element="rx.internal.schedulers.SleepingAction::innerScheduler:rx.Scheduler$Worker" />
			<role name="Request()" element="rx.internal.schedulers.SleepingAction::call():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Action0" />
			<role name="Adapter" element="rx.subscriptions.BooleanSubscription" />
			<role name="adaptee" element="rx.subscriptions.BooleanSubscription::EMPTY_ACTION:rx.functions.Action0" />
			<role name="Request()" element="rx.subscriptions.BooleanSubscription::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.SingleSubscriber" />
			<role name="Adapter" element="rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction" />
			<role name="adaptee" element="rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction::subscriber:rx.SingleSubscriber" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousSingle$ScalarSynchronousSingleAction::call():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.BufferUntilSubscriber$State" />
			<role name="Adapter" element="rx.internal.operators.BufferUntilSubscriber" />
			<role name="adaptee" element="rx.internal.operators.BufferUntilSubscriber::state:rx.internal.operators.BufferUntilSubscriber$State" />
			<role name="Request()" element="rx.internal.operators.BufferUntilSubscriber::hasObservers():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Action0" />
			<role name="Adapter" element="rx.internal.util.ActionObserver" />
			<role name="adaptee" element="rx.internal.util.ActionObserver::onCompleted:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.util.ActionObserver::onCompleted():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.OperatorZip$Zip" />
			<role name="Adapter" element="rx.internal.operators.OperatorZip$ZipProducer" />
			<role name="adaptee" element="rx.internal.operators.OperatorZip$ZipProducer::zipper:rx.internal.operators.OperatorZip$Zip" />
			<role name="Request()" element="rx.internal.operators.OperatorZip$ZipProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subscriptions.SerialSubscription" />
			<role name="Adapter" element="rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber" />
			<role name="adaptee" element="rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber::sd:rx.subscriptions.SerialSubscription" />
			<role name="Request()" element="rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber::onSubscribe(rx.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subscriptions.SerialSubscription" />
			<role name="Adapter" element="rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber" />
			<role name="adaptee" element="rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber::sd:rx.subscriptions.SerialSubscription" />
			<role name="Request()" element="rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber::onSubscribe(rx.Subscription):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool" />
			<role name="Adapter" element="rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker" />
			<role name="adaptee" element="rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker::pool:rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool" />
			<role name="Request()" element="rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker::call():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Adapter" element="org.apache.commons.lang.NotImplementedException" />
			<role name="adaptee" element="org.apache.commons.lang.NotImplementedException::delegate:org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::getMessage(int):java.lang.String" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::getMessages():java.lang.String[]" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::getThrowable(int):java.lang.Throwable" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::getThrowableCount():int" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::getThrowables():java.lang.Throwable[]" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::indexOfThrowable(java.lang.Class):int" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::indexOfThrowable(java.lang.Class, int):int" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::printStackTrace(java.io.PrintStream):void" />
			<role name="Request()" element="org.apache.commons.lang.NotImplementedException::printStackTrace(java.io.PrintWriter):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Adapter" element="org.apache.commons.lang.exception.NestableError" />
			<role name="adaptee" element="org.apache.commons.lang.exception.NestableError::delegate:org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::getMessage(int):java.lang.String" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::getMessages():java.lang.String[]" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::getThrowable(int):java.lang.Throwable" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::getThrowableCount():int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::getThrowables():java.lang.Throwable[]" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::indexOfThrowable(java.lang.Class):int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::indexOfThrowable(java.lang.Class, int):int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::printStackTrace(java.io.PrintStream):void" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableError::printStackTrace(java.io.PrintWriter):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Adapter" element="org.apache.commons.lang.exception.NestableException" />
			<role name="adaptee" element="org.apache.commons.lang.exception.NestableException::delegate:org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::getMessage(int):java.lang.String" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::getMessages():java.lang.String[]" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::getThrowable(int):java.lang.Throwable" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::getThrowableCount():int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::getThrowables():java.lang.Throwable[]" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::indexOfThrowable(java.lang.Class):int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::indexOfThrowable(java.lang.Class, int):int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::printStackTrace(java.io.PrintStream):void" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableException::printStackTrace(java.io.PrintWriter):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Adapter" element="org.apache.commons.lang.exception.NestableRuntimeException" />
			<role name="adaptee" element="org.apache.commons.lang.exception.NestableRuntimeException::delegate:org.apache.commons.lang.exception.NestableDelegate" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::getMessage(int):java.lang.String" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::getMessages():java.lang.String[]" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::getThrowable(int):java.lang.Throwable" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::getThrowableCount():int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::getThrowables():java.lang.Throwable[]" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::indexOfThrowable(java.lang.Class):int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::indexOfThrowable(java.lang.Class, int):int" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::printStackTrace(java.io.PrintStream):void" />
			<role name="Request()" element="org.apache.commons.lang.exception.NestableRuntimeException::printStackTrace(java.io.PrintWriter):void" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.commons.configuration.tree.DefaultConfigurationNode" />
			<role name="Adaptee" element="org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes" />
			<role name="adaptee" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::children:org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes" />
			<role name="adaptee" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::attributes:org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::addChild(org.apache.commons.configuration.tree.ConfigurationNode):void" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getChildren():java.util.List" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getChildrenCount():int" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getChildren(java.lang.String):java.util.List" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getChildrenCount(java.lang.String):int" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getChild(int):org.apache.commons.configuration.tree.ConfigurationNode" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::removeChild(org.apache.commons.configuration.tree.ConfigurationNode):boolean" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::removeChild(java.lang.String):boolean" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::removeChildren():void" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::addAttribute(org.apache.commons.configuration.tree.ConfigurationNode):void" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getAttributes():java.util.List" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getAttributeCount():int" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getAttributes(java.lang.String):java.util.List" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::removeAttribute(org.apache.commons.configuration.tree.ConfigurationNode):boolean" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::removeAttribute(java.lang.String):boolean" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::getAttribute(int):org.apache.commons.configuration.tree.ConfigurationNode" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::removeAttributes():void" />
			<role name="Request()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::visit(org.apache.commons.configuration.tree.ConfigurationNodeVisitor):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func1" />
			<role name="Adapter" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber" />
			<role name="adaptee" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func1" />
			<role name="Adapter" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber" />
			<role name="adaptee" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.internal.operators.OperatorMulticast" />
			<role name="Adaptee" element="rx.functions.Func0" />
			<role name="adaptee" element="rx.internal.operators.OperatorMulticast::subjectFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorMulticast::connect(rx.functions.Action1):void" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.internal.operators.OperatorReplay" />
			<role name="Adaptee" element="rx.functions.Func0" />
			<role name="adaptee" element="rx.internal.operators.OperatorReplay::bufferFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay::connect(rx.functions.Action1):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="Adapter" element="rx.internal.operators.OperatorReplay$BoundedReplayBuffer" />
			<role name="adaptee" element="rx.internal.operators.OperatorReplay$BoundedReplayBuffer::nl:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$BoundedReplayBuffer::next(T):void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$BoundedReplayBuffer::error(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$BoundedReplayBuffer::complete():void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$BoundedReplayBuffer::replay(rx.internal.operators.OperatorReplay$InnerProducer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="Adapter" element="rx.internal.operators.OperatorReplay$UnboundedReplayBuffer" />
			<role name="adaptee" element="rx.internal.operators.OperatorReplay$UnboundedReplayBuffer::nl:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$UnboundedReplayBuffer::next(T):void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$UnboundedReplayBuffer::error(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$UnboundedReplayBuffer::complete():void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$UnboundedReplayBuffer::replay(rx.internal.operators.OperatorReplay$InnerProducer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Action1" />
			<role name="Adapter" element="rx.internal.util.ActionNotificationObserver" />
			<role name="adaptee" element="rx.internal.util.ActionNotificationObserver::onNotification:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.util.ActionNotificationObserver::onNext(T):void" />
			<role name="Request()" element="rx.internal.util.ActionNotificationObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.util.ActionNotificationObserver::onCompleted():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Action1" />
			<role name="Adapter" element="rx.internal.util.ActionObserver" />
			<role name="adaptee" element="rx.internal.util.ActionObserver::onNext:rx.functions.Action1" />
			<role name="adaptee" element="rx.internal.util.ActionObserver::onError:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.util.ActionObserver::onNext(T):void" />
			<role name="Request()" element="rx.internal.util.ActionObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Adapter" element="rx.subjects.ReplaySubject$ReplayState" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplayState::buffer:rx.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::onNext(T):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::onCompleted():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool" />
			<role name="Adapter" element="rx.internal.schedulers.CachedThreadScheduler" />
			<role name="adaptee" element="rx.internal.schedulers.CachedThreadScheduler::NONE:rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool" />
			<role name="Request()" element="rx.internal.schedulers.CachedThreadScheduler::start():void" />
			<role name="Request()" element="rx.internal.schedulers.CachedThreadScheduler::shutdown():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool" />
			<role name="Adapter" element="rx.internal.schedulers.EventLoopsScheduler" />
			<role name="adaptee" element="rx.internal.schedulers.EventLoopsScheduler::NONE:rx.internal.schedulers.EventLoopsScheduler$FixedSchedulerPool" />
			<role name="Request()" element="rx.internal.schedulers.EventLoopsScheduler::start():void" />
			<role name="Request()" element="rx.internal.schedulers.EventLoopsScheduler::shutdown():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Adapter" element="org.apache.commons.configuration.interpol.ExprLookup" />
			<role name="adaptee" element="org.apache.commons.configuration.interpol.ExprLookup::configuration:org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.interpol.ExprLookup::lookup(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.EnvironmentConfiguration" />
			<role name="Adapter" element="org.apache.commons.configuration.interpol.EnvironmentLookup" />
			<role name="adaptee" element="org.apache.commons.configuration.interpol.EnvironmentLookup::environmentConfig:org.apache.commons.configuration.EnvironmentConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.interpol.EnvironmentLookup::lookup(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber" />
			<role name="Adaptee" element="rx.functions.Action1" />
			<role name="adaptee" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onSuccess:rx.functions.Action1" />
			<role name="adaptee" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onError:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onSuccess(T):void" />
			<role name="Request()" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.internal.operators.OnSubscribeUsing$DisposeAction" />
			<role name="Adaptee" element="rx.functions.Action1" />
			<role name="adaptee" element="rx.internal.operators.OnSubscribeUsing$DisposeAction::dispose:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeUsing$DisposeAction::call():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.FileConfiguration" />
			<role name="Adapter" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy" />
			<role name="adaptee" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy::configuration:org.apache.commons.configuration.FileConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy::refresh():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.FileConfiguration" />
			<role name="Adapter" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy" />
			<role name="adaptee" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::configuration:org.apache.commons.configuration.FileConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::init():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.reloading.ReloadingStrategy" />
			<role name="Adapter" element="org.apache.commons.configuration.AbstractFileConfiguration" />
			<role name="adaptee" element="org.apache.commons.configuration.AbstractFileConfiguration::strategy:org.apache.commons.configuration.reloading.ReloadingStrategy" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::save():void" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::setReloadingStrategy(org.apache.commons.configuration.reloading.ReloadingStrategy):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicBooleanProperty" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicBooleanProperty" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty::isValueAcceptable():boolean" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$BooleanProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicIntegerProperty" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicIntegerProperty" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty::isValueAcceptable():boolean" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$IntegerProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicStringProperty" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$DynamicStringProperty" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty::isValueAcceptable():boolean" />
			<role name="Request()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$StringProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.internal.schedulers.SchedulerWhen" />
			<role name="Adaptee" element="rx.Observer" />
			<role name="adaptee" element="rx.internal.schedulers.SchedulerWhen::workerObserver:rx.Observer" />
			<role name="Request()" element="rx.internal.schedulers.SchedulerWhen::createWorker():rx.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func0" />
			<role name="Adapter" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl" />
			<role name="adaptee" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::generator:rx.functions.Func0" />
			<role name="Request()" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::generateState():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func0" />
			<role name="Adapter" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl" />
			<role name="adaptee" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::generator:rx.functions.Func0" />
			<role name="Request()" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::generateState():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode" />
			<role name="Adapter" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer::tail:rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer::head:rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer$TimedNode" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer::next(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node" />
			<role name="Adapter" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::tail:rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::head:rx.subjects.ReplaySubject$ReplaySizeBoundBuffer$Node" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::next(T):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::drain(rx.subjects.ReplaySubject$ReplayProducer):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::last():java.lang.Object" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::size():int" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::isEmpty():boolean" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeBoundBuffer::toArray(T[]):java.lang.Object[]" />
		</instance>
		<instance>
			<role name="Adapter" element="com.netflix.hystrix.collapser.CollapsedRequestSubject" />
			<role name="Adaptee" element="rx.subjects.ReplaySubject" />
			<role name="adaptee" element="com.netflix.hystrix.collapser.CollapsedRequestSubject::subject:rx.subjects.ReplaySubject" />
			<role name="Request()" element="com.netflix.hystrix.collapser.CollapsedRequestSubject::setComplete():void" />
			<role name="Request()" element="com.netflix.hystrix.collapser.CollapsedRequestSubject::setException(java.lang.Exception):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func0" />
			<role name="Adapter" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$FutureCompleterWithConfigurableInterrupt" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$FutureCompleterWithConfigurableInterrupt::shouldInterruptThread:rx.functions.Func0" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$FutureCompleterWithConfigurableInterrupt::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixThreadPoolProperties" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::properties:com.netflix.hystrix.HystrixThreadPoolProperties" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::isQueueSpaceAvailable():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.lang.IntHashMap" />
			<role name="Adapter" element="org.apache.commons.lang.Entities$PrimitiveEntityMap" />
			<role name="adaptee" element="org.apache.commons.lang.Entities$PrimitiveEntityMap::mapValueToName:org.apache.commons.lang.IntHashMap" />
			<role name="Request()" element="org.apache.commons.lang.Entities$PrimitiveEntityMap::add(java.lang.String, int):void" />
			<role name="Request()" element="org.apache.commons.lang.Entities$PrimitiveEntityMap::name(int):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixThreadPoolMetrics" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::metrics:com.netflix.hystrix.HystrixThreadPoolMetrics" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::markThreadExecution():void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::markThreadCompletion():void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::markThreadRejection():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Adapter" element="com.netflix.config.jmx.BaseConfigMBean" />
			<role name="adaptee" element="com.netflix.config.jmx.BaseConfigMBean::config:org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Request()" element="com.netflix.config.jmx.BaseConfigMBean::getProperty(java.lang.String):java.lang.Object" />
			<role name="Request()" element="com.netflix.config.jmx.BaseConfigMBean::updateProperty(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.netflix.config.jmx.BaseConfigMBean::clearProperty(java.lang.String):void" />
			<role name="Request()" element="com.netflix.config.jmx.BaseConfigMBean::addProperty(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.FileSystem" />
			<role name="Adapter" element="org.apache.commons.configuration.AbstractFileConfiguration" />
			<role name="adaptee" element="org.apache.commons.configuration.AbstractFileConfiguration::fileSystem:org.apache.commons.configuration.FileSystem" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::load(java.net.URL):void" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::save(java.lang.String):void" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::save(java.net.URL):void" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::save(java.io.File):void" />
			<role name="Request()" element="org.apache.commons.configuration.AbstractFileConfiguration::resetFileSystem():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.logging.Log" />
			<role name="Adapter" element="org.apache.commons.configuration.DefaultFileSystem" />
			<role name="adaptee" element="org.apache.commons.configuration.DefaultFileSystem::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.DefaultFileSystem::locateFromURL(java.lang.String, java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.logging.Log" />
			<role name="Adapter" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy" />
			<role name="adaptee" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::logger:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::reloadingRequired():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.logging.Log" />
			<role name="Adapter" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy" />
			<role name="adaptee" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy::refresh():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Action0" />
			<role name="Adapter" element="rx.functions.Actions$Action1CallsAction0" />
			<role name="adaptee" element="rx.functions.Actions$Action1CallsAction0::action:rx.functions.Action0" />
			<role name="Request()" element="rx.functions.Actions$Action1CallsAction0::call(T):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixCommandProperties" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::properties:com.netflix.hystrix.HystrixCommandProperties" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::allowRequest():boolean" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::isOpen():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.slf4j.Logger" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixCollapser" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixCollapser::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCollapser::execute():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.config.PropertyListener" />
			<role name="Adapter" element="com.netflix.config.ExpandedConfigurationListenerAdapter" />
			<role name="adaptee" element="com.netflix.config.ExpandedConfigurationListenerAdapter::expandedListener:com.netflix.config.PropertyListener" />
			<role name="Request()" element="com.netflix.config.ExpandedConfigurationListenerAdapter::configurationChanged(org.apache.commons.configuration.event.ConfigurationEvent):void" />
		</instance>
		<instance>
			<role name="Adapter" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl" />
			<role name="Adaptee" element="rx.functions.Func2" />
			<role name="adaptee" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::next:rx.functions.Func2" />
			<role name="Request()" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::next(S, rx.Observer):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func3" />
			<role name="Adapter" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl" />
			<role name="adaptee" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::next:rx.functions.Func3" />
			<role name="Request()" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::next(S, long, rx.Observer):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Adapter" element="com.netflix.config.ConfigurationBackedDynamicPropertySupportImpl" />
			<role name="adaptee" element="com.netflix.config.ConfigurationBackedDynamicPropertySupportImpl::config:org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Request()" element="com.netflix.config.ConfigurationBackedDynamicPropertySupportImpl::getString(java.lang.String):java.lang.String" />
			<role name="Request()" element="com.netflix.config.ConfigurationBackedDynamicPropertySupportImpl::addConfigurationListener(com.netflix.config.PropertyListener):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.NotificationLite" />
			<role name="Adapter" element="rx.internal.operators.CachedObservable$CacheState" />
			<role name="adaptee" element="rx.internal.operators.CachedObservable$CacheState::nl:rx.internal.operators.NotificationLite" />
			<role name="Request()" element="rx.internal.operators.CachedObservable$CacheState::onNext(T):void" />
			<role name="Request()" element="rx.internal.operators.CachedObservable$CacheState::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.CachedObservable$CacheState::onCompleted():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.internal.operators.CachedObservable$CacheState" />
			<role name="Adapter" element="rx.internal.operators.CachedObservable$ReplayProducer" />
			<role name="adaptee" element="rx.internal.operators.CachedObservable$ReplayProducer::state:rx.internal.operators.CachedObservable$CacheState" />
			<role name="Request()" element="rx.internal.operators.CachedObservable$ReplayProducer::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.util.HystrixTimer" />
			<role name="Adapter" element="com.netflix.hystrix.collapser.RealCollapserTimer" />
			<role name="adaptee" element="com.netflix.hystrix.collapser.RealCollapserTimer::timer:com.netflix.hystrix.util.HystrixTimer" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RealCollapserTimer::addListener(com.netflix.hystrix.util.HystrixTimer$TimerListener):java.lang.ref.Reference" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.functions.Func1" />
			<role name="Adapter" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer" />
			<role name="adaptee" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::onSchedule:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.netflix.hystrix.HystrixCommandMetrics" />
			<role name="Adapter" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl" />
			<role name="adaptee" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::metrics:com.netflix.hystrix.HystrixCommandMetrics" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::markSuccess():void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCircuitBreaker$HystrixCircuitBreakerImpl::isOpen():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.logging.Log" />
			<role name="Adapter" element="org.apache.commons.configuration.DefaultConfigurationBuilder$ConfigurationBeanFactory" />
			<role name="adaptee" element="org.apache.commons.configuration.DefaultConfigurationBuilder$ConfigurationBeanFactory::logger:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.DefaultConfigurationBuilder$ConfigurationBeanFactory::createBean(java.lang.Class, org.apache.commons.configuration.beanutils.BeanDeclaration, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.commons.logging.Log" />
			<role name="Adapter" element="org.apache.commons.configuration.interpol.ConstantLookup" />
			<role name="adaptee" element="org.apache.commons.configuration.interpol.ConstantLookup::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.interpol.ConstantLookup::lookup(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.CompletableSubscriber" />
			<role name="Adapter" element="rx.internal.operators.CompletableFromEmitter$FromEmitter" />
			<role name="adaptee" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::actual:rx.CompletableSubscriber" />
			<role name="Request()" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::onCompleted():void" />
			<role name="Request()" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker" />
			<role name="Adaptee" element="com.netflix.hystrix.HystrixThreadPool" />
			<role name="adaptee" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker::threadPool:com.netflix.hystrix.HystrixThreadPool" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker::schedule(rx.functions.Action0):rx.Subscription" />
		</instance>
		<instance>
			<role name="Adaptee" element="rx.Scheduler" />
			<role name="Adapter" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer" />
			<role name="adaptee" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplaySizeAndTimeBoundBuffer::next(T):void" />
		</instance>
	</pattern>
	<pattern name="Command">
		<instance>
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Receiver" element="com.netflix.hystrix.ExecutionResult" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::executionResult:com.netflix.hystrix.ExecutionResult" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getFailedExecutionException():java.lang.Throwable" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getOriginatingCollapserKey():com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::getCommandRunStartTimeInNanos():long" />
		</instance>
		<instance>
			<role name="ConcreteCommand" element="com.netflix.hystrix.metric.HystrixCommandCompletion" />
			<role name="Receiver" element="com.netflix.hystrix.ExecutionResult" />
			<role name="receiver" element="com.netflix.hystrix.metric.HystrixCommandCompletion::executionResult:com.netflix.hystrix.ExecutionResult" />
			<role name="Execute()" element="com.netflix.hystrix.metric.HystrixCommandCompletion::isResponseThreadPoolRejected():boolean" />
			<role name="Execute()" element="com.netflix.hystrix.metric.HystrixCommandCompletion::isExecutedInThread():boolean" />
			<role name="Execute()" element="com.netflix.hystrix.metric.HystrixCommandCompletion::didCommandExecute():boolean" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.HystrixCommandProperties" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::properties:com.netflix.hystrix.HystrixCommandProperties" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::isCircuitBreakerOpen():boolean" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand::circuitBreaker:com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand::isCircuitBreakerOpen():boolean" />
		</instance>
		<instance>
			<role name="Receiver" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ConcreteCommand" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual" />
			<role name="receiver" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::numberOfPermits:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="Execute()" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::tryAcquire():boolean" />
		</instance>
	</pattern>
	<pattern name="Composite">
		<instance>
			<role name="Component" element="org.apache.commons.configuration.Configuration" />
			<role name="Composite" element="org.apache.commons.configuration.CompositeConfiguration" />
			<role name="Operation()" element="org.apache.commons.configuration.CompositeConfiguration::getKeys():java.util.Iterator" />
			<role name="Operation()" element="org.apache.commons.configuration.CompositeConfiguration::getKeys(java.lang.String):java.util.Iterator" />
			<role name="Operation()" element="org.apache.commons.configuration.CompositeConfiguration::isEmpty():boolean" />
			<role name="Operation()" element="org.apache.commons.configuration.CompositeConfiguration::containsKey(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.slf4j.Marker" />
			<role name="Composite" element="org.slf4j.helpers.BasicMarker" />
			<role name="Operation()" element="org.slf4j.helpers.BasicMarker::contains(org.slf4j.Marker):boolean" />
			<role name="Operation()" element="org.slf4j.helpers.BasicMarker::contains(java.lang.String):boolean" />
		</instance>
	</pattern>
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="rx.Scheduler" />
			<role name="Decorator" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler" />
			<role name="component" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler::actualScheduler:rx.Scheduler" />
			<role name="Operation()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler::createWorker():rx.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Component" element="rx.Scheduler" />
			<role name="Decorator" element="rx.internal.schedulers.SchedulerWhen" />
			<role name="component" element="rx.internal.schedulers.SchedulerWhen::actualScheduler:rx.Scheduler" />
			<role name="Operation()" element="rx.internal.schedulers.SchedulerWhen::createWorker():rx.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="Component" element="rx.subjects.Subject" />
			<role name="Decorator" element="rx.subjects.SerializedSubject" />
			<role name="component" element="rx.subjects.SerializedSubject::actual:rx.subjects.Subject" />
			<role name="Operation()" element="rx.subjects.SerializedSubject::hasObservers():boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.commons.configuration.Configuration" />
			<role name="Decorator" element="com.netflix.config.ConfigurationWithPollingSource" />
			<role name="component" element="com.netflix.config.ConfigurationWithPollingSource::config:org.apache.commons.configuration.Configuration" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::addProperty(java.lang.String, java.lang.Object):void" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::clear():void" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::clearProperty(java.lang.String):void" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::containsKey(java.lang.String):boolean" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBigDecimal(java.lang.String, java.math.BigDecimal):java.math.BigDecimal" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBigDecimal(java.lang.String):java.math.BigDecimal" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBigInteger(java.lang.String, java.math.BigInteger):java.math.BigInteger" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBigInteger(java.lang.String):java.math.BigInteger" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBoolean(java.lang.String, boolean):boolean" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBoolean(java.lang.String, java.lang.Boolean):java.lang.Boolean" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getBoolean(java.lang.String):boolean" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getByte(java.lang.String, byte):byte" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getByte(java.lang.String, java.lang.Byte):java.lang.Byte" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getByte(java.lang.String):byte" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getDouble(java.lang.String, double):double" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getDouble(java.lang.String, java.lang.Double):java.lang.Double" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getDouble(java.lang.String):double" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getFloat(java.lang.String, float):float" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getFloat(java.lang.String, java.lang.Float):java.lang.Float" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getFloat(java.lang.String):float" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getInt(java.lang.String, int):int" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getInt(java.lang.String):int" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getInteger(java.lang.String, java.lang.Integer):java.lang.Integer" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getLong(java.lang.String, long):long" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getLong(java.lang.String, java.lang.Long):java.lang.Long" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getLong(java.lang.String):long" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getProperties(java.lang.String):java.util.Properties" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getProperty(java.lang.String):java.lang.Object" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getShort(java.lang.String, short):short" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getShort(java.lang.String, java.lang.Short):java.lang.Short" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getShort(java.lang.String):short" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getString(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getString(java.lang.String):java.lang.String" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::getStringArray(java.lang.String):java.lang.String[]" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::isEmpty():boolean" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::setProperty(java.lang.String, java.lang.Object):void" />
			<role name="Operation()" element="com.netflix.config.ConfigurationWithPollingSource::subset(java.lang.String):org.apache.commons.configuration.Configuration" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.commons.configuration.Configuration" />
			<role name="Decorator" element="org.apache.commons.configuration.DataConfiguration" />
			<role name="component" element="org.apache.commons.configuration.DataConfiguration::configuration:org.apache.commons.configuration.Configuration" />
			<role name="Operation()" element="org.apache.commons.configuration.DataConfiguration::getProperty(java.lang.String):java.lang.Object" />
			<role name="Operation()" element="org.apache.commons.configuration.DataConfiguration::isEmpty():boolean" />
			<role name="Operation()" element="org.apache.commons.configuration.DataConfiguration::containsKey(java.lang.String):boolean" />
			<role name="Operation()" element="org.apache.commons.configuration.DataConfiguration::clearProperty(java.lang.String):void" />
			<role name="Operation()" element="org.apache.commons.configuration.DataConfiguration::setProperty(java.lang.String, java.lang.Object):void" />
			<role name="Operation()" element="org.apache.commons.configuration.DataConfiguration::getKeys():java.util.Iterator" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.commons.configuration.Configuration" />
			<role name="Decorator" element="org.apache.commons.configuration.SubsetConfiguration" />
			<role name="component" element="org.apache.commons.configuration.SubsetConfiguration::parent:org.apache.commons.configuration.Configuration" />
			<role name="Operation()" element="org.apache.commons.configuration.SubsetConfiguration::subset(java.lang.String):org.apache.commons.configuration.Configuration" />
			<role name="Operation()" element="org.apache.commons.configuration.SubsetConfiguration::containsKey(java.lang.String):boolean" />
			<role name="Operation()" element="org.apache.commons.configuration.SubsetConfiguration::getProperty(java.lang.String):java.lang.Object" />
			<role name="Operation()" element="org.apache.commons.configuration.SubsetConfiguration::getKeys(java.lang.String):java.util.Iterator" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber" />
			<role name="Component" element="rx.Observer" />
			<role name="component" element="rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber::doOnEachObserver:rx.Observer" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber::onCompleted():void" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.util.ObserverSubscriber" />
			<role name="Component" element="rx.Observer" />
			<role name="component" element="rx.internal.util.ObserverSubscriber::observer:rx.Observer" />
			<role name="Operation()" element="rx.internal.util.ObserverSubscriber::onNext(T):void" />
			<role name="Operation()" element="rx.internal.util.ObserverSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.internal.util.ObserverSubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.observers.SerializedObserver" />
			<role name="Component" element="rx.Observer" />
			<role name="component" element="rx.observers.SerializedObserver::actual:rx.Observer" />
			<role name="Operation()" element="rx.observers.SerializedObserver::onNext(T):void" />
			<role name="Operation()" element="rx.observers.SerializedObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.observers.SerializedObserver::onCompleted():void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.observers.SerializedSubscriber" />
			<role name="Component" element="rx.Observer" />
			<role name="component" element="rx.observers.SerializedSubscriber::s:rx.Observer" />
			<role name="Operation()" element="rx.observers.SerializedSubscriber::onCompleted():void" />
			<role name="Operation()" element="rx.observers.SerializedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.observers.SerializedSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.observers.TestObserver" />
			<role name="Component" element="rx.Observer" />
			<role name="component" element="rx.observers.TestObserver::delegate:rx.Observer" />
			<role name="Operation()" element="rx.observers.TestObserver::onCompleted():void" />
			<role name="Operation()" element="rx.observers.TestObserver::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.observers.TestObserver::onNext(T):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.observers.TestSubscriber" />
			<role name="Component" element="rx.Observer" />
			<role name="component" element="rx.observers.TestSubscriber::delegate:rx.Observer" />
			<role name="Operation()" element="rx.observers.TestSubscriber::onCompleted():void" />
			<role name="Operation()" element="rx.observers.TestSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.observers.TestSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Component" element="rx.SingleSubscriber" />
			<role name="Decorator" element="rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber" />
			<role name="component" element="rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber::actual:rx.SingleSubscriber" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeOnAssemblySingle$OnAssemblySingleSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Component" element="rx.SingleSubscriber" />
			<role name="Decorator" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber" />
			<role name="component" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber::actual:rx.SingleSubscriber" />
			<role name="Operation()" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber::onSuccess(T):void" />
			<role name="Operation()" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="rx.SingleSubscriber" />
			<role name="Decorator" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber" />
			<role name="component" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::actual:rx.SingleSubscriber" />
			<role name="Operation()" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onSuccess(T):void" />
			<role name="Operation()" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="rx.SingleSubscriber" />
			<role name="Decorator" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber" />
			<role name="component" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::actual:rx.SingleSubscriber" />
			<role name="Operation()" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::onSuccess(T):void" />
			<role name="Operation()" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Component" element="rx.functions.Action0" />
			<role name="Decorator" element="rx.internal.schedulers.SleepingAction" />
			<role name="component" element="rx.internal.schedulers.SleepingAction::underlying:rx.functions.Action0" />
			<role name="Operation()" element="rx.internal.schedulers.SleepingAction::call():void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber" />
			<role name="Component" element="rx.CompletableSubscriber" />
			<role name="component" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Operation()" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber" />
			<role name="Component" element="rx.CompletableSubscriber" />
			<role name="component" element="rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Operation()" element="rx.internal.operators.CompletableOnSubscribeConcatArray$ConcatInnerSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber" />
			<role name="Component" element="rx.CompletableSubscriber" />
			<role name="component" element="rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Operation()" element="rx.internal.operators.CompletableOnSubscribeConcatIterable$ConcatInnerSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.OnSubscribeOnAssemblyCompletable$OnAssemblyCompletableSubscriber" />
			<role name="Component" element="rx.CompletableSubscriber" />
			<role name="component" element="rx.internal.operators.OnSubscribeOnAssemblyCompletable$OnAssemblyCompletableSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeOnAssemblyCompletable$OnAssemblyCompletableSubscriber::onSubscribe(rx.Subscription):void" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeOnAssemblyCompletable$OnAssemblyCompletableSubscriber::onCompleted():void" />
			<role name="Operation()" element="rx.internal.operators.OnSubscribeOnAssemblyCompletable$OnAssemblyCompletableSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.observers.SafeCompletableSubscriber" />
			<role name="Component" element="rx.CompletableSubscriber" />
			<role name="component" element="rx.observers.SafeCompletableSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Operation()" element="rx.observers.SafeCompletableSubscriber::onCompleted():void" />
			<role name="Operation()" element="rx.observers.SafeCompletableSubscriber::onError(java.lang.Throwable):void" />
			<role name="Operation()" element="rx.observers.SafeCompletableSubscriber::onSubscribe(rx.Subscription):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.OperatorElementAt$InnerProducer" />
			<role name="Component" element="rx.Producer" />
			<role name="component" element="rx.internal.operators.OperatorElementAt$InnerProducer::actual:rx.Producer" />
			<role name="Operation()" element="rx.internal.operators.OperatorElementAt$InnerProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.operators.OperatorScan$InitialProducer" />
			<role name="Component" element="rx.Producer" />
			<role name="component" element="rx.internal.operators.OperatorScan$InitialProducer::producer:rx.Producer" />
			<role name="Operation()" element="rx.internal.operators.OperatorScan$InitialProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.producers.ProducerArbiter" />
			<role name="Component" element="rx.Producer" />
			<role name="component" element="rx.internal.producers.ProducerArbiter::currentProducer:rx.Producer" />
			<role name="component" element="rx.internal.producers.ProducerArbiter::missedProducer:rx.Producer" />
			<role name="Operation()" element="rx.internal.producers.ProducerArbiter::request(long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.internal.producers.ProducerObserverArbiter" />
			<role name="Component" element="rx.Producer" />
			<role name="component" element="rx.internal.producers.ProducerObserverArbiter::currentProducer:rx.Producer" />
			<role name="component" element="rx.internal.producers.ProducerObserverArbiter::missedProducer:rx.Producer" />
			<role name="Operation()" element="rx.internal.producers.ProducerObserverArbiter::request(long):void" />
		</instance>
		<instance>
			<role name="Decorator" element="rx.observables.AsyncOnSubscribe$AsyncOuterManager" />
			<role name="Component" element="rx.Producer" />
			<role name="component" element="rx.observables.AsyncOnSubscribe$AsyncOuterManager::concatProducer:rx.Producer" />
			<role name="Operation()" element="rx.observables.AsyncOnSubscribe$AsyncOuterManager::request(long):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.commons.lang.time.FastDateFormat$NumberRule" />
			<role name="Decorator" element="org.apache.commons.lang.time.FastDateFormat$TwelveHourField" />
			<role name="component" element="org.apache.commons.lang.time.FastDateFormat$TwelveHourField::mRule:org.apache.commons.lang.time.FastDateFormat$NumberRule" />
			<role name="Operation()" element="org.apache.commons.lang.time.FastDateFormat$TwelveHourField::appendTo(java.lang.StringBuffer, int):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.commons.lang.time.FastDateFormat$NumberRule" />
			<role name="Decorator" element="org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField" />
			<role name="component" element="org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField::mRule:org.apache.commons.lang.time.FastDateFormat$NumberRule" />
			<role name="Operation()" element="org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField::appendTo(java.lang.StringBuffer, int):void" />
		</instance>
	</pattern>
	<pattern name="Observer">
		<instance>
			<role name="Observer" element="org.apache.commons.configuration.tree.ConfigurationNode" />
			<role name="Subject" element="org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes" />
			<role name="Notify()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode$SubNodes::visit(org.apache.commons.configuration.tree.ConfigurationNodeVisitor):void" />
		</instance>
		<instance>
			<role name="Observer" element="com.netflix.config.PollListener" />
			<role name="Subject" element="com.netflix.config.AbstractPollingScheduler" />
			<role name="Notify()" element="com.netflix.config.AbstractPollingScheduler::fireEvent(com.netflix.config.PollListener$EventType, com.netflix.config.PollResult, java.lang.Throwable):void" />
		</instance>
	</pattern>
	<pattern name="State">
		<instance>
			<role name="State" element="rx.Scheduler$Worker" />
			<role name="Context" element="rx.subjects.TestSubject" />
			<role name="state" element="rx.subjects.TestSubject::innerScheduler:rx.Scheduler$Worker" />
			<role name="Request()" element="rx.subjects.TestSubject::onCompleted(long):void" />
			<role name="Request()" element="rx.subjects.TestSubject::onError(java.lang.Throwable, long):void" />
			<role name="Request()" element="rx.subjects.TestSubject::onNext(T, long):void" />
		</instance>
		<instance>
			<role name="State" element="rx.Observer" />
			<role name="Context" element="rx.internal.schedulers.SchedulerWhen" />
			<role name="state" element="rx.internal.schedulers.SchedulerWhen::workerObserver:rx.Observer" />
			<role name="Request()" element="rx.internal.schedulers.SchedulerWhen::createWorker():rx.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="State" element="rx.Observer" />
			<role name="Context" element="rx.internal.operators.OperatorZip$Zip" />
			<role name="state" element="rx.internal.operators.OperatorZip$Zip::child:rx.Observer" />
			<role name="Request()" element="rx.internal.operators.OperatorZip$Zip::tick():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorSwitch$SwitchSubscriber" />
			<role name="State" element="rx.Producer" />
			<role name="state" element="rx.internal.operators.OperatorSwitch$SwitchSubscriber::producer:rx.Producer" />
			<role name="Request()" element="rx.internal.operators.OperatorSwitch$SwitchSubscriber::innerProducer(rx.Producer, long):void" />
			<role name="Request()" element="rx.internal.operators.OperatorSwitch$SwitchSubscriber::childRequested(long):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribePublishMulticast" />
			<role name="State" element="rx.Producer" />
			<role name="state" element="rx.internal.operators.OnSubscribePublishMulticast::producer:rx.Producer" />
			<role name="Request()" element="rx.internal.operators.OnSubscribePublishMulticast::setProducer(rx.Producer):void" />
			<role name="Request()" element="rx.internal.operators.OnSubscribePublishMulticast::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorReplay$ReplaySubscriber" />
			<role name="State" element="rx.Producer" />
			<role name="state" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::producer:rx.Producer" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::makeRequest(long, long):void" />
		</instance>
		<instance>
			<role name="State" element="rx.observables.AsyncOnSubscribe" />
			<role name="Context" element="rx.observables.AsyncOnSubscribe$AsyncOuterManager" />
			<role name="state" element="rx.observables.AsyncOnSubscribe$AsyncOuterManager::parent:rx.observables.AsyncOnSubscribe" />
			<role name="Request()" element="rx.observables.AsyncOnSubscribe$AsyncOuterManager::nextIteration(long):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.commons.configuration.Configuration" />
			<role name="Context" element="org.apache.commons.configuration.ConfigurationMap$ConfigurationSet" />
			<role name="state" element="org.apache.commons.configuration.ConfigurationMap$ConfigurationSet::configuration:org.apache.commons.configuration.Configuration" />
			<role name="Request()" element="org.apache.commons.configuration.ConfigurationMap$ConfigurationSet::size():int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.commons.configuration.Configuration" />
			<role name="Context" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass" />
			<role name="state" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass::configuration:org.apache.commons.configuration.Configuration" />
			<role name="Request()" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass::getDynaProperty(java.lang.String):org.apache.commons.beanutils.DynaProperty" />
			<role name="Request()" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass::getDynaProperties():org.apache.commons.beanutils.DynaProperty[]" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber::onOverflow:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber::assertCapacity():boolean" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber::action:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.operators.SingleDoAfterTerminate$SingleDoAfterTerminateSubscriber::doAction():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.schedulers.ScheduledAction" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.internal.schedulers.ScheduledAction::action:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.schedulers.ScheduledAction::run():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ActionSubscriber" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.internal.util.ActionSubscriber::onCompleted:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.util.ActionSubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.subscriptions.BooleanSubscription" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.subscriptions.BooleanSubscription::EMPTY_ACTION:rx.functions.Action0" />
			<role name="Request()" element="rx.subscriptions.BooleanSubscription::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeAutoConnect" />
			<role name="State" element="rx.observables.ConnectableObservable" />
			<role name="state" element="rx.internal.operators.OnSubscribeAutoConnect::source:rx.observables.ConnectableObservable" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeAutoConnect::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeRefCount" />
			<role name="State" element="rx.observables.ConnectableObservable" />
			<role name="state" element="rx.internal.operators.OnSubscribeRefCount::source:rx.observables.ConnectableObservable" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeRefCount::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.plugins.RxJavaHooks" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onObservableCreate:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onSingleCreate:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onCompletableCreate:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onComputationScheduler:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onIOScheduler:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onNewThreadScheduler:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onScheduleAction:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onObservableReturn:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onObservableSubscribeError:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onObservableLift:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onSingleReturn:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onSingleSubscribeError:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onSingleLift:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onCompletableSubscribeError:rx.functions.Func1" />
			<role name="state" element="rx.plugins.RxJavaHooks::onCompletableLift:rx.functions.Func1" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onCreate():rx.Observable$OnSubscribe" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onCreate():rx.Single$OnSubscribe" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onCreate(rx.Completable$OnSubscribe):rx.Completable$OnSubscribe" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onComputationScheduler(rx.Scheduler):rx.Scheduler" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onIOScheduler(rx.Scheduler):rx.Scheduler" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onNewThreadScheduler(rx.Scheduler):rx.Scheduler" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onScheduledAction(rx.functions.Action0):rx.functions.Action0" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onObservableReturn(rx.Subscription):rx.Subscription" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onObservableError(java.lang.Throwable):java.lang.Throwable" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onObservableLift():rx.Observable$Operator" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onSingleReturn(rx.Subscription):rx.Subscription" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onSingleError(java.lang.Throwable):java.lang.Throwable" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onSingleLift():rx.Observable$Operator" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onCompletableError(java.lang.Throwable):java.lang.Throwable" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onCompletableLift():rx.Completable$Operator" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ActionObserver" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.internal.util.ActionObserver::onCompleted:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.util.ActionObserver::onCompleted():void" />
		</instance>
		<instance>
			<role name="State" element="rx.CompletableSubscriber" />
			<role name="Context" element="rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber" />
			<role name="state" element="rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Request()" element="rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.CompletableOnSubscribeConcat$CompletableConcatSubscriber::next():void" />
		</instance>
		<instance>
			<role name="State" element="rx.CompletableSubscriber" />
			<role name="Context" element="rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber" />
			<role name="state" element="rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber::actual:rx.CompletableSubscriber" />
			<role name="Request()" element="rx.internal.operators.CompletableOnSubscribeMerge$CompletableMergeSubscriber::terminate():void" />
		</instance>
		<instance>
			<role name="State" element="rx.CompletableSubscriber" />
			<role name="Context" element="rx.internal.operators.CompletableFromEmitter$FromEmitter" />
			<role name="state" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::actual:rx.CompletableSubscriber" />
			<role name="Request()" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::onCompleted():void" />
			<role name="Request()" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.commons.configuration.tree.ConfigurationNode" />
			<role name="Context" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer" />
			<role name="state" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::node:org.apache.commons.configuration.tree.ConfigurationNode" />
			<role name="Request()" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::isLeaf():boolean" />
			<role name="Request()" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::isAttribute():boolean" />
			<role name="Request()" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::getName():org.apache.commons.jxpath.ri.QName" />
			<role name="Request()" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::getValue():java.lang.Object" />
			<role name="Request()" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::setValue(java.lang.Object):void" />
			<role name="Request()" element="org.apache.commons.configuration.tree.xpath.ConfigurationNodePointer::compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer, org.apache.commons.jxpath.ri.model.NodePointer):int" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeFilter$FilterSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeFilter$FilterSubscriber::predicate:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeFilter$FilterSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeFlattenIterable$FlattenIterableSubscriber::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeMap$MapSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeMap$MapSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeMap$MapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OperatorEagerConcatMap$EagerOuterSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorGroupBy$GroupBySubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OperatorGroupBy$GroupBySubscriber::keySelector:rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OperatorGroupBy$GroupBySubscriber::valueSelector:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OperatorGroupBy$GroupBySubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber::onNext:rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber::onError:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber::onNext(T):void" />
			<role name="Request()" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorMapPair$MapPairSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OperatorMapPair$MapPairSubscriber::collectionSelector:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OperatorMapPair$MapPairSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.SingleOnSubscribeMap$MapSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.CompletableFlatMapSingleToCompletable$SourceSubscriber::onSuccess(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeToMap$ToMapSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeToMap$ToMapSubscriber::keySelector:rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeToMap$ToMapSubscriber::valueSelector:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeToMap$ToMapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeToMultimap$ToMultimapSubscriber" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeToMultimap$ToMultimapSubscriber::keySelector:rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeToMultimap$ToMultimapSubscriber::valueSelector:rx.functions.Func1" />
			<role name="state" element="rx.internal.operators.OnSubscribeToMultimap$ToMultimapSubscriber::collectionFactory:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeToMultimap$ToMultimapSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.plugins.RxJavaHooks" />
			<role name="state" element="rx.plugins.RxJavaHooks::onError:rx.functions.Action1" />
			<role name="Request()" element="rx.plugins.RxJavaHooks::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorMulticast" />
			<role name="State" element="rx.functions.Func0" />
			<role name="state" element="rx.internal.operators.OperatorMulticast::subjectFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorMulticast::connect(rx.functions.Action1):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorReplay" />
			<role name="State" element="rx.functions.Func0" />
			<role name="state" element="rx.internal.operators.OperatorReplay::bufferFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay::connect(rx.functions.Action1):void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingPercentile" />
			<role name="state" element="com.netflix.hystrix.util.HystrixRollingPercentile::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.util.HystrixRollingPercentile::addValue(int[]):void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.config.ConfigurationManager" />
			<role name="state" element="com.netflix.config.ConfigurationManager::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.ConfigurationManager::getConfigInstance():org.apache.commons.configuration.AbstractConfiguration" />
			<role name="Request()" element="com.netflix.config.ConfigurationManager::registerConfigBean():void" />
			<role name="Request()" element="com.netflix.config.ConfigurationManager::removeDefaultConfiguration():void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.config.DynamicProperty" />
			<role name="state" element="com.netflix.config.DynamicProperty::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.DynamicProperty::notifyCallbacks():void" />
			<role name="Request()" element="com.netflix.config.DynamicProperty::updateValue():boolean" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.config.DynamicPropertyFactory" />
			<role name="state" element="com.netflix.config.DynamicPropertyFactory::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.DynamicPropertyFactory::getInstance():com.netflix.config.DynamicPropertyFactory" />
			<role name="Request()" element="com.netflix.config.DynamicPropertyFactory::checkAndWarn(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.config.WebApplicationProperties" />
			<role name="state" element="com.netflix.config.WebApplicationProperties::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.WebApplicationProperties::initialize():void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.hystrix.Hystrix" />
			<role name="state" element="com.netflix.hystrix.Hystrix::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.Hystrix::startCurrentThreadExecutingCommand(com.netflix.hystrix.HystrixCommandKey):rx.functions.Action0" />
			<role name="Request()" element="com.netflix.hystrix.Hystrix::endCurrentThreadExecutingCommand(com.netflix.hystrix.Hystrix$ConcurrentStack):void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.hystrix.HystrixRequestLog" />
			<role name="state" element="com.netflix.hystrix.HystrixRequestLog::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.HystrixRequestLog::addExecutedCommand(com.netflix.hystrix.HystrixInvokableInfo):void" />
			<role name="Request()" element="com.netflix.hystrix.HystrixRequestLog::getExecutedCommandsAsString():java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.hystrix.collapser.RequestBatch" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestBatch::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestBatch::executeBatchIfNotAlreadyStarted():void" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestBatch::shutdown():void" />
		</instance>
		<instance>
			<role name="State" element="org.slf4j.Logger" />
			<role name="Context" element="com.netflix.hystrix.collapser.RequestCollapserFactory" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestCollapserFactory::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestCollapserFactory::getRequestCollapser(com.netflix.hystrix.collapser.HystrixCollapserBridge):com.netflix.hystrix.collapser.RequestCollapser" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ActionNotificationObserver" />
			<role name="State" element="rx.functions.Action1" />
			<role name="state" element="rx.internal.util.ActionNotificationObserver::onNotification:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.util.ActionNotificationObserver::onNext(T):void" />
			<role name="Request()" element="rx.internal.util.ActionNotificationObserver::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.util.ActionNotificationObserver::onCompleted():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ActionObserver" />
			<role name="State" element="rx.functions.Action1" />
			<role name="state" element="rx.internal.util.ActionObserver::onNext:rx.functions.Action1" />
			<role name="state" element="rx.internal.util.ActionObserver::onError:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.util.ActionObserver::onNext(T):void" />
			<role name="Request()" element="rx.internal.util.ActionObserver::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ActionSubscriber" />
			<role name="State" element="rx.functions.Action1" />
			<role name="state" element="rx.internal.util.ActionSubscriber::onNext:rx.functions.Action1" />
			<role name="state" element="rx.internal.util.ActionSubscriber::onError:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.util.ActionSubscriber::onNext(T):void" />
			<role name="Request()" element="rx.internal.util.ActionSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.subjects.ReplaySubject$ReplayState" />
			<role name="State" element="rx.subjects.ReplaySubject$ReplayBuffer" />
			<role name="state" element="rx.subjects.ReplaySubject$ReplayState::buffer:rx.subjects.ReplaySubject$ReplayBuffer" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::call(rx.Subscriber):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::onNext(T):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject$ReplayState::onCompleted():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorReplay$ReplaySubscriber" />
			<role name="State" element="rx.internal.operators.OperatorReplay$ReplayBuffer" />
			<role name="state" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::buffer:rx.internal.operators.OperatorReplay$ReplayBuffer" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::onNext(T):void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::onCompleted():void" />
			<role name="Request()" element="rx.internal.operators.OperatorReplay$ReplaySubscriber::replay():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorZip$Zip" />
			<role name="State" element="rx.functions.FuncN" />
			<role name="state" element="rx.internal.operators.OperatorZip$Zip::zipFunction:rx.functions.FuncN" />
			<role name="Request()" element="rx.internal.operators.OperatorZip$Zip::tick():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.SystemConfiguration" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.SystemConfiguration::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.SystemConfiguration::setSystemProperties(org.apache.commons.configuration.PropertiesConfiguration):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber" />
			<role name="state" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onSuccess:rx.functions.Action1" />
			<role name="state" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onError:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onSuccess(T):void" />
			<role name="Request()" element="rx.internal.operators.SingleDoOnEvent$SingleDoOnEventSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.internal.operators.OnSubscribeUsing$DisposeAction" />
			<role name="state" element="rx.internal.operators.OnSubscribeUsing$DisposeAction::dispose:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeUsing$DisposeAction::call():void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action0" />
			<role name="Context" element="rx.internal.operators.OperatorDoOnSubscribe" />
			<role name="state" element="rx.internal.operators.OperatorDoOnSubscribe::subscribe:rx.functions.Action0" />
			<role name="Request()" element="rx.internal.operators.OperatorDoOnSubscribe::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy" />
			<role name="State" element="org.apache.commons.configuration.FileConfiguration" />
			<role name="state" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::configuration:org.apache.commons.configuration.FileConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::getFile():java.io.File" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::getName(java.io.File):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy" />
			<role name="State" element="org.apache.commons.configuration.FileConfiguration" />
			<role name="state" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::configuration:org.apache.commons.configuration.FileConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::init():void" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::getFile():org.apache.commons.vfs2.FileObject" />
		</instance>
		<instance>
			<role name="State" element="org.apache.commons.configuration.FileSystem" />
			<role name="Context" element="org.apache.commons.configuration.resolver.CatalogResolver" />
			<role name="state" element="org.apache.commons.configuration.resolver.CatalogResolver::fs:org.apache.commons.configuration.FileSystem" />
			<role name="Request()" element="org.apache.commons.configuration.resolver.CatalogResolver::resolveEntity(java.lang.String, java.lang.String):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="State" element="org.apache.commons.configuration.FileSystem" />
			<role name="Context" element="org.apache.commons.configuration.resolver.CatalogResolver$Catalog" />
			<role name="state" element="org.apache.commons.configuration.resolver.CatalogResolver$Catalog::fs:org.apache.commons.configuration.FileSystem" />
			<role name="Request()" element="org.apache.commons.configuration.resolver.CatalogResolver$Catalog::loadSystemCatalogs():void" />
			<role name="Request()" element="org.apache.commons.configuration.resolver.CatalogResolver$Catalog::parseCatalog(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.resolver.CatalogResolver" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.resolver.CatalogResolver::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.resolver.CatalogResolver::resolveEntity(java.lang.String, java.lang.String):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.ConfigurationFactory" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.ConfigurationFactory::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.ConfigurationFactory::getConfiguration():org.apache.commons.configuration.Configuration" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.ConfigurationUtils" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.ConfigurationUtils::LOG:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.ConfigurationUtils::locate(org.apache.commons.configuration.FileSystem, java.lang.String, java.lang.String):java.net.URL" />
			<role name="Request()" element="org.apache.commons.configuration.ConfigurationUtils::locateFromClasspath(java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass::getDynaProperty(java.lang.String):org.apache.commons.beanutils.DynaProperty" />
			<role name="Request()" element="org.apache.commons.configuration.beanutils.ConfigurationDynaClass::getDynaProperties():org.apache.commons.beanutils.DynaProperty[]" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.lang.time.FastDateFormat" />
			<role name="State" element="org.apache.commons.lang.time.FastDateFormat$Rule" />
			<role name="state" element="org.apache.commons.lang.time.FastDateFormat::mRules:org.apache.commons.lang.time.FastDateFormat$Rule[]" />
			<role name="Request()" element="org.apache.commons.lang.time.FastDateFormat::init():void" />
			<role name="Request()" element="org.apache.commons.lang.time.FastDateFormat::applyRules(java.util.Calendar, java.lang.StringBuffer):java.lang.StringBuffer" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.ConfigurationWithPollingSource" />
			<role name="State" element="com.netflix.config.AbstractPollingScheduler" />
			<role name="state" element="com.netflix.config.ConfigurationWithPollingSource::scheduler:com.netflix.config.AbstractPollingScheduler" />
			<role name="Request()" element="com.netflix.config.ConfigurationWithPollingSource::stopPolling():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.DynamicConfiguration" />
			<role name="State" element="com.netflix.config.AbstractPollingScheduler" />
			<role name="state" element="com.netflix.config.DynamicConfiguration::scheduler:com.netflix.config.AbstractPollingScheduler" />
			<role name="Request()" element="com.netflix.config.DynamicConfiguration::stopLoading():void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.internal.operators.OnSubscribeFromEmitter" />
			<role name="state" element="rx.internal.operators.OnSubscribeFromEmitter::asyncEmitter:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeFromEmitter::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl" />
			<role name="state" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::onUnsubscribe:rx.functions.Action1" />
			<role name="Request()" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::onUnsubscribe(S):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl" />
			<role name="state" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::onUnsubscribe:rx.functions.Action1" />
			<role name="Request()" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::onUnsubscribe(S):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Action1" />
			<role name="Context" element="rx.subjects.SubjectSubscriptionManager" />
			<role name="state" element="rx.subjects.SubjectSubscriptionManager::onStart:rx.functions.Action1" />
			<role name="state" element="rx.subjects.SubjectSubscriptionManager::onTerminated:rx.functions.Action1" />
			<role name="state" element="rx.subjects.SubjectSubscriptionManager::onAdded:rx.functions.Action1" />
			<role name="Request()" element="rx.subjects.SubjectSubscriptionManager::call(rx.Subscriber):void" />
			<role name="Request()" element="rx.subjects.SubjectSubscriptionManager::add(rx.subjects.SubjectSubscriptionManager$SubjectObserver):boolean" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func1" />
			<role name="Context" element="rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable" />
			<role name="state" element="rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable::mapper:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeFlattenIterable$OnSubscribeScalarFlattenIterable::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func1" />
			<role name="Context" element="rx.internal.operators.OnSubscribeRedo" />
			<role name="state" element="rx.internal.operators.OnSubscribeRedo::controlHandlerFunction:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeRedo::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func1" />
			<role name="Context" element="rx.internal.operators.OnSubscribeUsing" />
			<role name="state" element="rx.internal.operators.OnSubscribeUsing::observableFactory:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeUsing::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.ConfigurationMap" />
			<role name="State" element="org.apache.commons.configuration.Configuration" />
			<role name="state" element="org.apache.commons.configuration.ConfigurationMap::configuration:org.apache.commons.configuration.Configuration" />
			<role name="Request()" element="org.apache.commons.configuration.ConfigurationMap::put(java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="org.apache.commons.configuration.ConfigurationMap::get(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.internal.operators.OnSubscribeCollect" />
			<role name="state" element="rx.internal.operators.OnSubscribeCollect::collectionFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeCollect::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.internal.operators.OnSubscribeDefer" />
			<role name="state" element="rx.internal.operators.OnSubscribeDefer::observableFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeDefer::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector" />
			<role name="state" element="rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector::subscriptionDelay:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeDelaySubscriptionWithSelector::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.internal.operators.OnSubscribeUsing" />
			<role name="state" element="rx.internal.operators.OnSubscribeUsing::resourceFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeUsing::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl" />
			<role name="state" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::generator:rx.functions.Func0" />
			<role name="Request()" element="rx.observables.AsyncOnSubscribe$AsyncOnSubscribeImpl::generateState():java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl" />
			<role name="state" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::generator:rx.functions.Func0" />
			<role name="Request()" element="rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl::generateState():java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorBufferWithTime" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorBufferWithTime::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithTime::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorDebounceWithTime" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorDebounceWithTime::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorDebounceWithTime::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorDelay" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorDelay::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorDelay::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorSampleWithTime" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorSampleWithTime::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorSampleWithTime::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorTakeTimed" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorTakeTimed::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorTakeTimed::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorTimeoutBase" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorTimeoutBase::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorTimeoutBase::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorWindowWithTime" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorWindowWithTime::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithTime::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber" />
			<role name="State" element="rx.functions.Func0" />
			<role name="state" element="rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber::otherFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber::createNewWindow():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber" />
			<role name="State" element="rx.functions.Func0" />
			<role name="state" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber::onCompleted:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$FutureCompleterWithConfigurableInterrupt" />
			<role name="State" element="rx.functions.Func0" />
			<role name="state" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$FutureCompleterWithConfigurableInterrupt::shouldInterruptThread:rx.functions.Func0" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$FutureCompleterWithConfigurableInterrupt::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.BackpressureDrainManager" />
			<role name="State" element="rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback" />
			<role name="state" element="rx.internal.util.BackpressureDrainManager::actual:rx.internal.util.BackpressureDrainManager$BackpressureQueueCallback" />
			<role name="Request()" element="rx.internal.util.BackpressureDrainManager::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.lang.Entities" />
			<role name="State" element="org.apache.commons.lang.Entities$EntityMap" />
			<role name="state" element="org.apache.commons.lang.Entities::map:org.apache.commons.lang.Entities$EntityMap" />
			<role name="Request()" element="org.apache.commons.lang.Entities::addEntity(java.lang.String, int):void" />
			<role name="Request()" element="org.apache.commons.lang.Entities::entityName(int):java.lang.String" />
			<role name="Request()" element="org.apache.commons.lang.Entities::entityValue(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Context" element="org.slf4j.MDC" />
			<role name="State" element="org.slf4j.spi.MDCAdapter" />
			<role name="state" element="org.slf4j.MDC::mdcAdapter:org.slf4j.spi.MDCAdapter" />
			<role name="Request()" element="org.slf4j.MDC::put(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.slf4j.MDC::get(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.slf4j.MDC::remove(java.lang.String):void" />
			<role name="Request()" element="org.slf4j.MDC::clear():void" />
			<role name="Request()" element="org.slf4j.MDC::getCopyOfContextMap():java.util.Map" />
			<role name="Request()" element="org.slf4j.MDC::setContextMap(java.util.Map):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.DefaultFileSystem" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.DefaultFileSystem::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.DefaultFileSystem::locateFromURL(java.lang.String, java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.plist.PropertyListConfiguration" />
			<role name="State" element="org.apache.commons.configuration.plist.PropertyListConfiguration$DateComponentParser" />
			<role name="state" element="org.apache.commons.configuration.plist.PropertyListConfiguration::DATE_PARSERS:org.apache.commons.configuration.plist.PropertyListConfiguration$DateComponentParser[]" />
			<role name="Request()" element="org.apache.commons.configuration.plist.PropertyListConfiguration::parseDate(java.lang.String):java.util.Date" />
			<role name="Request()" element="org.apache.commons.configuration.plist.PropertyListConfiguration::formatDate(java.util.Calendar):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::logger:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::reloadingRequired():boolean" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.FileChangedReloadingStrategy::hasChanged():boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.ManagedReloadingStrategy::refresh():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::updateLastModified():void" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::hasChanged():boolean" />
			<role name="Request()" element="org.apache.commons.configuration.reloading.VFSFileChangedReloadingStrategy::getFile():org.apache.commons.vfs2.FileObject" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeDelaySubscription" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OnSubscribeDelaySubscription::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeDelaySubscription::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeRedo" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OnSubscribeRedo::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeRedo::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeSkipTimed" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OnSubscribeSkipTimed::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeSkipTimed::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeTimerOnce" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OnSubscribeTimerOnce::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeTimerOnce::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeTimerPeriodically" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OnSubscribeTimerPeriodically::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeTimerPeriodically::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorSubscribeOn" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.OperatorSubscribeOn::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.OperatorSubscribeOn::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.functions.Actions$Action1CallsAction0" />
			<role name="State" element="rx.functions.Action0" />
			<role name="state" element="rx.functions.Actions$Action1CallsAction0::action:rx.functions.Action0" />
			<role name="Request()" element="rx.functions.Actions$Action1CallsAction0::call(T):void" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Context" element="com.netflix.hystrix.collapser.RequestCollapserFactory" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestCollapserFactory::collapserKey:com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestCollapserFactory::getCollapserForGlobalScope(com.netflix.hystrix.collapser.HystrixCollapserBridge):com.netflix.hystrix.collapser.RequestCollapser" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.collapser.RequestBatch" />
			<role name="State" element="com.netflix.hystrix.collapser.HystrixCollapserBridge" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestBatch::commandCollapser:com.netflix.hystrix.collapser.HystrixCollapserBridge" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestBatch::offer(RequestArgumentType):rx.Observable" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestBatch::executeBatchIfNotAlreadyStarted():void" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.config.PropertyListener" />
			<role name="Context" element="com.netflix.config.ExpandedConfigurationListenerAdapter" />
			<role name="state" element="com.netflix.config.ExpandedConfigurationListenerAdapter::expandedListener:com.netflix.config.PropertyListener" />
			<role name="Request()" element="com.netflix.config.ExpandedConfigurationListenerAdapter::configurationChanged(org.apache.commons.configuration.event.ConfigurationEvent):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.CompletableOnSubscribeTimeout" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.operators.CompletableOnSubscribeTimeout::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.operators.CompletableOnSubscribeTimeout::call(rx.CompletableSubscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.DynamicProperty" />
			<role name="State" element="com.netflix.config.DynamicPropertySupport" />
			<role name="state" element="com.netflix.config.DynamicProperty::dynamicPropertySupportImpl:com.netflix.config.DynamicPropertySupport" />
			<role name="Request()" element="com.netflix.config.DynamicProperty::updateValue():boolean" />
			<role name="Request()" element="com.netflix.config.DynamicProperty::initialize(com.netflix.config.DynamicPropertySupport):void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.util.InternMap" />
			<role name="State" element="com.netflix.hystrix.util.InternMap$ValueConstructor" />
			<role name="state" element="com.netflix.hystrix.util.InternMap::valueConstructor:com.netflix.hystrix.util.InternMap$ValueConstructor" />
			<role name="Request()" element="com.netflix.hystrix.util.InternMap::interned(K):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.ConcurrentCompositeConfiguration" />
			<role name="State" element="org.slf4j.Logger" />
			<role name="state" element="com.netflix.config.ConcurrentCompositeConfiguration::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.ConcurrentCompositeConfiguration::setContainerConfiguration(org.apache.commons.configuration.AbstractConfiguration, java.lang.String, int):void" />
			<role name="Request()" element="com.netflix.config.ConcurrentCompositeConfiguration::addConfigurationAtIndex(org.apache.commons.configuration.AbstractConfiguration, java.lang.String, int):void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.ClasspathPropertiesConfiguration" />
			<role name="State" element="org.slf4j.Logger" />
			<role name="state" element="com.netflix.config.ClasspathPropertiesConfiguration::log:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.ClasspathPropertiesConfiguration::loadResources(java.lang.ClassLoader, java.lang.String):void" />
			<role name="Request()" element="com.netflix.config.ClasspathPropertiesConfiguration::loadProperties(java.net.URL):java.util.Properties" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.ConcurrentMapConfiguration" />
			<role name="State" element="org.slf4j.Logger" />
			<role name="state" element="com.netflix.config.ConcurrentMapConfiguration::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.ConcurrentMapConfiguration::fireEvent(int, java.lang.String, java.lang.Object, boolean):void" />
			<role name="Request()" element="com.netflix.config.ConcurrentMapConfiguration::fireError(int, java.lang.String, java.lang.Object, java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.beanutils.ConfigurationDynaBean" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.beanutils.ConfigurationDynaBean::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.beanutils.ConfigurationDynaBean::set(java.lang.String, java.lang.Object):void" />
			<role name="Request()" element="org.apache.commons.configuration.beanutils.ConfigurationDynaBean::get(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.internal.operators.OperatorBufferWithSingleObservable" />
			<role name="state" element="rx.internal.operators.OperatorBufferWithSingleObservable::bufferClosingSelector:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithSingleObservable::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func0" />
			<role name="Context" element="rx.internal.operators.OperatorScan" />
			<role name="state" element="rx.internal.operators.OperatorScan::initialValueFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.OperatorScan::call(rx.Subscriber):rx.Subscriber" />
		</instance>
		<instance>
			<role name="State" element="rx.functions.Func1" />
			<role name="Context" element="rx.internal.operators.SingleOnSubscribeUsing" />
			<role name="state" element="rx.internal.operators.SingleOnSubscribeUsing::singleFactory:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.operators.SingleOnSubscribeUsing::call(rx.SingleSubscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.collapser.RequestCollapser" />
			<role name="State" element="com.netflix.hystrix.collapser.CollapserTimer" />
			<role name="state" element="com.netflix.hystrix.collapser.RequestCollapser::timer:com.netflix.hystrix.collapser.CollapserTimer" />
			<role name="Request()" element="com.netflix.hystrix.collapser.RequestCollapser::submitRequest(RequestArgumentType):rx.Observable" />
		</instance>
		<instance>
			<role name="Context" element="org.slf4j.MarkerFactory" />
			<role name="State" element="org.slf4j.IMarkerFactory" />
			<role name="state" element="org.slf4j.MarkerFactory::markerFactory:org.slf4j.IMarkerFactory" />
			<role name="Request()" element="org.slf4j.MarkerFactory::getMarker(java.lang.String):org.slf4j.Marker" />
			<role name="Request()" element="org.slf4j.MarkerFactory::getDetachedMarker(java.lang.String):org.slf4j.Marker" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.config.sources.JDBCConfigurationSource" />
			<role name="State" element="org.slf4j.Logger" />
			<role name="state" element="com.netflix.config.sources.JDBCConfigurationSource::log:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.config.sources.JDBCConfigurationSource::close(java.sql.Connection, java.sql.Statement, java.sql.ResultSet):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission" />
			<role name="State" element="rx.Scheduler" />
			<role name="state" element="rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission::scheduler:rx.Scheduler" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousSingle$NormalScheduledEmission::call(rx.SingleSubscriber):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator" />
			<role name="State" element="rx.functions.FuncN" />
			<role name="state" element="rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator::combiner:rx.functions.FuncN" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeCombineLatest$LatestCoordinator::drain():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber" />
			<role name="State" element="rx.functions.FuncN" />
			<role name="state" element="rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber::combiner:rx.functions.FuncN" />
			<role name="Request()" element="rx.internal.operators.OperatorWithLatestFromMany$WithLatestMainSubscriber::onNext(T):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer" />
			<role name="State" element="rx.functions.Func1" />
			<role name="state" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::onSchedule:rx.functions.Func1" />
			<role name="Request()" element="rx.internal.util.ScalarSynchronousObservable$ScalarAsyncProducer::request(long):void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingNumber" />
			<role name="State" element="com.netflix.hystrix.util.HystrixRollingNumber$Time" />
			<role name="state" element="com.netflix.hystrix.util.HystrixRollingNumber::time:com.netflix.hystrix.util.HystrixRollingNumber$Time" />
			<role name="Request()" element="com.netflix.hystrix.util.HystrixRollingNumber::getCurrentBucket():com.netflix.hystrix.util.HystrixRollingNumber$Bucket" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingPercentile" />
			<role name="State" element="com.netflix.hystrix.util.HystrixRollingPercentile$Time" />
			<role name="state" element="com.netflix.hystrix.util.HystrixRollingPercentile::time:com.netflix.hystrix.util.HystrixRollingPercentile$Time" />
			<role name="Request()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getCurrentBucket():com.netflix.hystrix.util.HystrixRollingPercentile$Bucket" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.DefaultConfigurationBuilder$ConfigurationBeanFactory" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.DefaultConfigurationBuilder$ConfigurationBeanFactory::logger:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.DefaultConfigurationBuilder$ConfigurationBeanFactory::createBean(java.lang.Class, org.apache.commons.configuration.beanutils.BeanDeclaration, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.interpol.ConstantLookup" />
			<role name="State" element="org.apache.commons.logging.Log" />
			<role name="state" element="org.apache.commons.configuration.interpol.ConstantLookup::log:org.apache.commons.logging.Log" />
			<role name="Request()" element="org.apache.commons.configuration.interpol.ConstantLookup::lookup(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.netflix.hystrix.HystrixThreadPool" />
			<role name="Context" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker" />
			<role name="state" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker::threadPool:com.netflix.hystrix.HystrixThreadPool" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolWorker::schedule(rx.functions.Action0):rx.Subscription" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.CompletableFromEmitter" />
			<role name="State" element="rx.functions.Action1" />
			<role name="state" element="rx.internal.operators.CompletableFromEmitter::producer:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.CompletableFromEmitter::call(rx.CompletableSubscriber):void" />
		</instance>
		<instance>
			<role name="State" element="rx.Subscription" />
			<role name="Context" element="com.netflix.hystrix.HystrixCachedObservable" />
			<role name="state" element="com.netflix.hystrix.HystrixCachedObservable::originalSubscription:rx.Subscription" />
			<role name="Request()" element="com.netflix.hystrix.HystrixCachedObservable::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.metric.HystrixCollapserEventStream" />
			<role name="State" element="com.netflix.hystrix.HystrixCollapserKey" />
			<role name="state" element="com.netflix.hystrix.metric.HystrixCollapserEventStream::collapserKey:com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Request()" element="com.netflix.hystrix.metric.HystrixCollapserEventStream::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.metric.HystrixCollapserEvent" />
			<role name="State" element="com.netflix.hystrix.HystrixCollapserKey" />
			<role name="state" element="com.netflix.hystrix.metric.HystrixCollapserEvent::collapserKey:com.netflix.hystrix.HystrixCollapserKey" />
			<role name="Request()" element="com.netflix.hystrix.metric.HystrixCollapserEvent::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableHolder" />
			<role name="State" element="org.slf4j.Logger" />
			<role name="state" element="com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableHolder::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableHolder::get(com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault" />
			<role name="State" element="org.slf4j.Logger" />
			<role name="state" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::logger:org.slf4j.Logger" />
			<role name="Request()" element="com.netflix.hystrix.HystrixThreadPool$HystrixThreadPoolDefault::touchConfig():void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.SingleOnSubscribeUsing" />
			<role name="State" element="rx.functions.Action1" />
			<role name="state" element="rx.internal.operators.SingleOnSubscribeUsing::disposeAction:rx.functions.Action1" />
			<role name="Request()" element="rx.internal.operators.SingleOnSubscribeUsing::handleSubscriptionTimeError(rx.SingleSubscriber, Resource, java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.SingleOnSubscribeUsing" />
			<role name="State" element="rx.functions.Func0" />
			<role name="state" element="rx.internal.operators.SingleOnSubscribeUsing::resourceFactory:rx.functions.Func0" />
			<role name="Request()" element="rx.internal.operators.SingleOnSubscribeUsing::call(rx.SingleSubscriber):void" />
		</instance>
	</pattern>
	<pattern name="Strategy">
		<instance>
			<role name="Strategy" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="Context" element="com.netflix.hystrix.util.HystrixRollingPercentile" />
			<role name="strategy" element="com.netflix.hystrix.util.HystrixRollingPercentile::enabled:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::addValue(int[]):void" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getPercentile(double):int" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::getMean():int" />
			<role name="ContextInterface()" element="com.netflix.hystrix.util.HystrixRollingPercentile::reset():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.commons.configuration.MultiFileHierarchicalConfiguration" />
			<role name="Strategy" element="org.apache.commons.configuration.reloading.ReloadingStrategy" />
			<role name="strategy" element="org.apache.commons.configuration.MultiFileHierarchicalConfiguration::fileStrategy:org.apache.commons.configuration.reloading.ReloadingStrategy" />
			<role name="ContextInterface()" element="org.apache.commons.configuration.MultiFileHierarchicalConfiguration::createReloadingStrategy():org.apache.commons.configuration.reloading.ReloadingStrategy" />
		</instance>
		<instance>
			<role name="Strategy" element="com.netflix.hystrix.strategy.properties.HystrixDynamicProperty" />
			<role name="Context" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainProperty" />
			<role name="strategy" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainProperty::sProp:com.netflix.hystrix.strategy.properties.HystrixDynamicProperty" />
			<role name="ContextInterface()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainProperty::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.strategy.concurrency.HystrixLifecycleForwardingRequestVariable" />
			<role name="Strategy" element="com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle" />
			<role name="strategy" element="com.netflix.hystrix.strategy.concurrency.HystrixLifecycleForwardingRequestVariable::lifecycle:com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableLifecycle" />
			<role name="ContextInterface()" element="com.netflix.hystrix.strategy.concurrency.HystrixLifecycleForwardingRequestVariable::initialValue():java.lang.Object" />
			<role name="ContextInterface()" element="com.netflix.hystrix.strategy.concurrency.HystrixLifecycleForwardingRequestVariable::shutdown(T):void" />
		</instance>
		<instance>
			<role name="Context" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual" />
			<role name="Strategy" element="com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="strategy" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::numberOfPermits:com.netflix.hystrix.strategy.properties.HystrixProperty" />
			<role name="ContextInterface()" element="com.netflix.hystrix.AbstractCommand$TryableSemaphoreActual::tryAcquire():boolean" />
		</instance>
		<instance>
			<role name="Context" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber" />
			<role name="Strategy" element="rx.BackpressureOverflow$Strategy" />
			<role name="strategy" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber::overflowStrategy:rx.BackpressureOverflow$Strategy" />
			<role name="ContextInterface()" element="rx.internal.operators.OperatorOnBackpressureBuffer$BufferSubscriber::assertCapacity():boolean" />
		</instance>
	</pattern>
	<pattern name="Bridge">
		<instance>
			<role name="Implementor" element="rx.Producer" />
			<role name="Abstraction" element="rx.Subscriber" />
			<role name="implementor" element="rx.Subscriber::producer:rx.Producer" />
			<role name="Operation()" element="rx.Subscriber::request(long):void" />
			<role name="Operation()" element="rx.Subscriber::setProducer(rx.Producer):void" />
		</instance>
		<instance>
			<role name="Implementor" element="rx.functions.Action0" />
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::endCurrentThreadExecutingCommand:rx.functions.Action0" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleCommandEnd(boolean):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.HdrHistogram.AbstractHistogramIterator" />
			<role name="Implementor" element="org.HdrHistogram.AbstractHistogram" />
			<role name="implementor" element="org.HdrHistogram.AbstractHistogramIterator::histogram:org.HdrHistogram.AbstractHistogram" />
			<role name="Operation()" element="org.HdrHistogram.AbstractHistogramIterator::resetIterator(org.HdrHistogram.AbstractHistogram):void" />
			<role name="Operation()" element="org.HdrHistogram.AbstractHistogramIterator::hasNext():boolean" />
			<role name="Operation()" element="org.HdrHistogram.AbstractHistogramIterator::next():org.HdrHistogram.HistogramIterationValue" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.commons.configuration.AbstractFileConfiguration" />
			<role name="Implementor" element="org.apache.commons.configuration.reloading.ReloadingStrategy" />
			<role name="implementor" element="org.apache.commons.configuration.AbstractFileConfiguration::strategy:org.apache.commons.configuration.reloading.ReloadingStrategy" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::save():void" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::setReloadingStrategy(org.apache.commons.configuration.reloading.ReloadingStrategy):void" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::reload(boolean):boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.commons.configuration.AbstractFileConfiguration" />
			<role name="Implementor" element="org.apache.commons.configuration.FileSystem" />
			<role name="implementor" element="org.apache.commons.configuration.AbstractFileConfiguration::fileSystem:org.apache.commons.configuration.FileSystem" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::load(java.net.URL):void" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::save(java.lang.String):void" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::save(java.net.URL):void" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::save(java.io.File):void" />
			<role name="Operation()" element="org.apache.commons.configuration.AbstractFileConfiguration::getPath():java.lang.String" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Implementor" element="org.slf4j.Logger" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::logger:org.slf4j.Logger" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::getFallbackOrThrowException(com.netflix.hystrix.AbstractCommand, com.netflix.hystrix.HystrixEventType, com.netflix.hystrix.exception.HystrixRuntimeException$FailureType, java.lang.String, java.lang.Exception):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleRequestCacheHitAndEmitValues(com.netflix.hystrix.HystrixCommandResponseFromCache, com.netflix.hystrix.AbstractCommand):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleSemaphoreRejectionViaFallback():rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleBadRequestByEmittingError(java.lang.Exception):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleFailureViaFallback(java.lang.Exception):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleFallbackRejectionByEmittingError():rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleFallbackDisabledByEmittingError(java.lang.Exception, com.netflix.hystrix.exception.HystrixRuntimeException$FailureType, java.lang.String):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleThreadEnd(com.netflix.hystrix.AbstractCommand):void" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnExecutionErrorHook(java.lang.Throwable):java.lang.Exception" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnFallbackErrorHook(java.lang.Throwable):java.lang.Exception" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnErrorHook(com.netflix.hystrix.exception.HystrixRuntimeException$FailureType, java.lang.Throwable):java.lang.Exception" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnExecutionEmitHook(R):java.lang.Object" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnFallbackEmitHook(R):java.lang.Object" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnEmitHook(R):java.lang.Object" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::decomposeException(java.lang.Exception):java.lang.Throwable" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.HystrixCollapser" />
			<role name="Implementor" element="org.slf4j.Logger" />
			<role name="implementor" element="com.netflix.hystrix.HystrixCollapser::logger:org.slf4j.Logger" />
			<role name="Operation()" element="com.netflix.hystrix.HystrixCollapser::execute():java.lang.Object" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Implementor" element="com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::circuitBreaker:com.netflix.hystrix.HystrixCircuitBreaker" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::applyHystrixSemantics(com.netflix.hystrix.AbstractCommand):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::isCircuitBreakerOpen():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.AbstractCommand" />
			<role name="Implementor" element="com.netflix.hystrix.HystrixThreadPool" />
			<role name="implementor" element="com.netflix.hystrix.AbstractCommand::threadPool:com.netflix.hystrix.HystrixThreadPool" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::executeCommandWithSpecifiedIsolation(com.netflix.hystrix.AbstractCommand):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleThreadPoolRejectionViaFallback(java.lang.Exception):rx.Observable" />
			<role name="Operation()" element="com.netflix.hystrix.AbstractCommand::handleThreadEnd(com.netflix.hystrix.AbstractCommand):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.config.AbstractPollingScheduler" />
			<role name="Implementor" element="org.slf4j.Logger" />
			<role name="implementor" element="com.netflix.config.AbstractPollingScheduler::log:org.slf4j.Logger" />
			<role name="Operation()" element="com.netflix.config.AbstractPollingScheduler::fireEvent(com.netflix.config.PollListener$EventType, com.netflix.config.PollResult, java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.config.DynamicMapProperty" />
			<role name="Implementor" element="org.slf4j.Logger" />
			<role name="implementor" element="com.netflix.config.DynamicMapProperty::logger:org.slf4j.Logger" />
			<role name="Operation()" element="com.netflix.config.DynamicMapProperty::load():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy" />
			<role name="Implementor" element="org.slf4j.Logger" />
			<role name="implementor" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy::logger:org.slf4j.Logger" />
			<role name="Operation()" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy::getThreadPool(com.netflix.hystrix.HystrixThreadPoolKey, com.netflix.hystrix.strategy.properties.HystrixProperty, com.netflix.hystrix.strategy.properties.HystrixProperty, com.netflix.hystrix.strategy.properties.HystrixProperty, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue):java.util.concurrent.ThreadPoolExecutor" />
			<role name="Operation()" element="com.netflix.hystrix.strategy.concurrency.HystrixConcurrencyStrategy::getThreadPool(com.netflix.hystrix.HystrixThreadPoolKey, com.netflix.hystrix.HystrixThreadPoolProperties):java.util.concurrent.ThreadPoolExecutor" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.netflix.config.AbstractDynamicPropertyListener" />
			<role name="TemplateMethod()" element="com.netflix.config.AbstractDynamicPropertyListener::addProperty(java.lang.Object, java.lang.String, java.lang.Object, boolean):void" />
			<role name="TemplateMethod()" element="com.netflix.config.AbstractDynamicPropertyListener::clearProperty(java.lang.Object, java.lang.String, java.lang.Object, boolean):void" />
			<role name="TemplateMethod()" element="com.netflix.config.AbstractDynamicPropertyListener::setProperty(java.lang.Object, java.lang.String, java.lang.Object, boolean):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.config.AbstractPollingScheduler" />
			<role name="TemplateMethod()" element="com.netflix.config.AbstractPollingScheduler::startPolling(com.netflix.config.PolledConfigurationSource, org.apache.commons.configuration.Configuration):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.config.DynamicListProperty" />
			<role name="TemplateMethod()" element="com.netflix.config.DynamicListProperty::load():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.config.DynamicMapProperty" />
			<role name="TemplateMethod()" element="com.netflix.config.DynamicMapProperty::load():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.config.DynamicProperty$CachedValue" />
			<role name="TemplateMethod()" element="com.netflix.config.DynamicProperty$CachedValue::getValue():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.config.DynamicSetProperty" />
			<role name="TemplateMethod()" element="com.netflix.config.DynamicSetProperty::load():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.AbstractCommand" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.AbstractCommand::getFallbackOrThrowException(com.netflix.hystrix.AbstractCommand, com.netflix.hystrix.HystrixEventType, com.netflix.hystrix.exception.HystrixRuntimeException$FailureType, java.lang.String, java.lang.Exception):rx.Observable" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.AbstractCommand::getUserExecutionObservable(com.netflix.hystrix.AbstractCommand):rx.Observable" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.AbstractCommand::wrapWithOnFallbackErrorHook(java.lang.Throwable):java.lang.Exception" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.HystrixObservableCommand" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.HystrixObservableCommand::getExecutionObservable():rx.Observable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.metric.consumer.BucketedCounterStream" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.metric.consumer.BucketedCounterStream::startCachingStreamValuesIfUnstarted():void" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.metric.consumer.BucketedCounterStream::getLatest():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::checkAndFlip():void" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::get():java.lang.Object" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainBuilder" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainBuilder::add(java.lang.String, T):com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainBuilder" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink::checkAndFlip():void" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink::get():java.lang.Object" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.netflix.hystrix.util.Striped64" />
			<role name="TemplateMethod()" element="com.netflix.hystrix.util.Striped64::retryUpdate(long, com.netflix.hystrix.util.Striped64$HashCode, boolean):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.configuration.AbstractConfiguration" />
			<role name="TemplateMethod()" element="org.apache.commons.configuration.AbstractConfiguration::addPropertyValues(java.lang.String, java.lang.Object, char):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.configuration.ConfigurationXMLReader" />
			<role name="TemplateMethod()" element="org.apache.commons.configuration.ConfigurationXMLReader::parseConfiguration():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.configuration.HierarchicalConfiguration$BuilderVisitor" />
			<role name="TemplateMethod()" element="org.apache.commons.configuration.HierarchicalConfiguration$BuilderVisitor::visitBeforeChildren(org.apache.commons.configuration.HierarchicalConfiguration$Node, org.apache.commons.configuration.ConfigurationKey):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.configuration.HierarchicalConfigurationConverter" />
			<role name="TemplateMethod()" element="org.apache.commons.configuration.HierarchicalConfigurationConverter::closeElements(org.apache.commons.configuration.ConfigurationKey, org.apache.commons.configuration.ConfigurationKey):void" />
			<role name="TemplateMethod()" element="org.apache.commons.configuration.HierarchicalConfigurationConverter::openElements(org.apache.commons.configuration.ConfigurationKey, org.apache.commons.configuration.ConfigurationKey, org.apache.commons.configuration.Configuration, java.util.Set):java.lang.String" />
			<role name="TemplateMethod()" element="org.apache.commons.configuration.HierarchicalConfigurationConverter::fireValue(java.lang.String, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.lang.math.Range" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMinimumLong():long" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMinimumInteger():int" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMinimumDouble():double" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMinimumFloat():float" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMaximumLong():long" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMaximumInteger():int" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMaximumDouble():double" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::getMaximumFloat():float" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::containsRange(org.apache.commons.lang.math.Range):boolean" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::overlapsRange(org.apache.commons.lang.math.Range):boolean" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::hashCode():int" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.math.Range::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.lang.text.StrMatcher" />
			<role name="TemplateMethod()" element="org.apache.commons.lang.text.StrMatcher::isMatch(char[], int):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.commons.logging.LogFactory" />
			<role name="TemplateMethod()" element="org.apache.commons.logging.LogFactory::getFactory():org.apache.commons.logging.LogFactory" />
			<role name="TemplateMethod()" element="org.apache.commons.logging.LogFactory::getLog(java.lang.Class):org.apache.commons.logging.Log" />
			<role name="TemplateMethod()" element="org.apache.commons.logging.LogFactory::getLog(java.lang.String):org.apache.commons.logging.Log" />
			<role name="TemplateMethod()" element="org.apache.commons.logging.LogFactory::release(java.lang.ClassLoader):void" />
			<role name="TemplateMethod()" element="org.apache.commons.logging.LogFactory::releaseAll():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.HdrHistogram.AbstractHistogram" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::init(long, long, int, double, int):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::recordCountAtValue(long, long):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::recordSingleValue(long):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::handleRecordException(long, long, java.lang.Exception):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::reset():void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::add(org.HdrHistogram.AbstractHistogram):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::subtract(org.HdrHistogram.AbstractHistogram):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::shiftValuesLeft(int):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::nonConcurrentNormalizingIndexShift(int, boolean):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::shiftLowestHalfBucketContentsLeft(int):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::shiftValuesRight(int):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::hashCode():int" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getEstimatedFootprintInBytes():int" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getMinValue():long" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getMean():double" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getStdDeviation():double" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getValueAtPercentile(double):long" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getPercentileAtOrBelowValue(long):double" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getCountBetweenValues(long, long):long" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::getCountAtValue(long):long" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::outputPercentileDistribution(java.io.PrintStream, int, java.lang.Double, boolean):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::writeObject(java.io.ObjectOutputStream):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::readObject(java.io.ObjectInputStream):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::encodeIntoByteBuffer(java.nio.ByteBuffer):int" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::decodeFromByteBuffer(, java.lang.Class, long, java.util.zip.Inflater):org.HdrHistogram.AbstractHistogram" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::fillCountsArrayFromSourceBuffer(java.nio.ByteBuffer, int, int):int" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::fillBufferFromCountsArray(java.nio.ByteBuffer):void" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogram::establishInternalTackingValues(int):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.HdrHistogram.AbstractHistogramIterator" />
			<role name="TemplateMethod()" element="org.HdrHistogram.AbstractHistogramIterator::next():org.HdrHistogram.HistogramIterationValue" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseAsyncEmitter" />
			<role name="TemplateMethod()" element="rx.internal.operators.OnSubscribeFromEmitter$NoOverflowBaseAsyncEmitter::onNext(T):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.internal.schedulers.SchedulerWhen$ScheduledAction" />
			<role name="TemplateMethod()" element="rx.internal.schedulers.SchedulerWhen$ScheduledAction::call(rx.Scheduler$Worker):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.internal.util.ObjectPool" />
			<role name="TemplateMethod()" element="rx.internal.util.ObjectPool::borrowObject():java.lang.Object" />
			<role name="TemplateMethod()" element="rx.internal.util.ObjectPool::initialize(int):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.observables.AsyncOnSubscribe" />
			<role name="TemplateMethod()" element="rx.observables.AsyncOnSubscribe::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.observables.ConnectableObservable" />
			<role name="TemplateMethod()" element="rx.observables.ConnectableObservable::connect():rx.Subscription" />
			<role name="TemplateMethod()" element="rx.observables.ConnectableObservable::autoConnect(int, rx.functions.Action1):rx.Observable" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.observables.SyncOnSubscribe" />
			<role name="TemplateMethod()" element="rx.observables.SyncOnSubscribe::call(rx.Subscriber):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="rx.Scheduler$Worker" />
			<role name="TemplateMethod()" element="rx.Scheduler$Worker::schedulePeriodically(rx.functions.Action0, long, long, java.util.concurrent.TimeUnit):rx.Subscription" />
		</instance>
	</pattern>
	<pattern name="Visitor">
		<instance>
			<role name="ConcreteElement" element="org.apache.commons.configuration.tree.DefaultConfigurationNode" />
			<role name="Visitor" element="org.apache.commons.configuration.tree.ConfigurationNodeVisitor" />
			<role name="Accept()" element="org.apache.commons.configuration.tree.DefaultConfigurationNode::visit(org.apache.commons.configuration.tree.ConfigurationNodeVisitor):void" />
		</instance>
	</pattern>
	<pattern name="Proxy">
		<instance>
			<role name="Proxy" element="org.apache.commons.configuration.XMLConfiguration$XMLFileConfigurationDelegate" />
			<role name="RealSubject" element="org.apache.commons.configuration.XMLConfiguration" />
			<role name="Request()" element="org.apache.commons.configuration.XMLConfiguration$XMLFileConfigurationDelegate::load(java.io.InputStream):void" />
		</instance>
		<instance>
			<role name="Proxy" element="org.HdrHistogram.DoubleHistogram" />
			<role name="RealSubject" element="org.HdrHistogram.AbstractHistogram" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::getStartTimeStamp():long" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::setStartTimeStamp(long):void" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::getEndTimeStamp():long" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::setEndTimeStamp(long):void" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::getTag():java.lang.String" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::setTag(java.lang.String):void" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::getNeededByteBufferCapacity():int" />
			<role name="Request()" element="org.HdrHistogram.DoubleHistogram::encodeIntoCompressedByteBuffer(java.nio.ByteBuffer, int):int" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorDebounceWithSelector$1" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorDebounceWithSelector$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorDebounceWithTime$1" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorDebounceWithTime$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorSampleWithObservable$2" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorSampleWithObservable$2::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorSampleWithObservable$2::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorDelayWithSelector$1" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorDelayWithSelector$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorBufferWithStartEndObservable$1" />
			<role name="RealSubject" element="rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithStartEndObservable$1::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithStartEndObservable$1::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1" />
			<role name="RealSubject" element="rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithStartEndObservable$BufferingSubscriber$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorTimeoutWithSelector$1$1" />
			<role name="RealSubject" element="rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorTimeoutWithSelector$1$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorTimeoutWithSelector$2$1" />
			<role name="RealSubject" element="rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorTimeoutWithSelector$2$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorWindowWithStartEndObservable$1" />
			<role name="RealSubject" element="rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithStartEndObservable$1::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithStartEndObservable$1::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1" />
			<role name="RealSubject" element="rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithStartEndObservable$SourceSubscriber$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.CachedObservable$CacheState$1" />
			<role name="RealSubject" element="rx.internal.operators.CachedObservable$CacheState" />
			<role name="Request()" element="rx.internal.operators.CachedObservable$CacheState$1::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.CachedObservable$CacheState$1::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber" />
			<role name="RealSubject" element="rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeJoin$ResultSink$LeftSubscriber$LeftDurationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber" />
			<role name="RealSubject" element="rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeJoin$ResultSink$RightSubscriber$RightDurationSubscriber::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorBufferWithSingleObservable$2" />
			<role name="RealSubject" element="rx.internal.operators.OperatorBufferWithSingleObservable$BufferingSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithSingleObservable$2::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorBufferWithSingleObservable$2::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber" />
			<role name="RealSubject" element="rx.internal.operators.OperatorOnBackpressureLatest$LatestEmitter" />
			<role name="Request()" element="rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorOnBackpressureLatest$LatestSubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorScan$3" />
			<role name="RealSubject" element="rx.internal.operators.OperatorScan$InitialProducer" />
			<role name="Request()" element="rx.internal.operators.OperatorScan$3::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorScan$3::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber" />
			<role name="RealSubject" element="rx.internal.operators.OperatorWindowWithObservable$SourceSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithObservable$BoundarySubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber" />
			<role name="RealSubject" element="rx.internal.operators.OperatorWindowWithObservableFactory$SourceSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorWindowWithObservableFactory$BoundarySubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.subjects.PublishSubject$PublishSubjectState" />
			<role name="RealSubject" element="rx.subjects.PublishSubject$PublishSubjectProducer" />
			<role name="Request()" element="rx.subjects.PublishSubject$PublishSubjectState::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.subjects.PublishSubject$PublishSubjectState::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.subjects.ReplaySubject" />
			<role name="RealSubject" element="rx.subjects.ReplaySubject$ReplayState" />
			<role name="Request()" element="rx.subjects.ReplaySubject::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.subjects.ReplaySubject::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.subjects.UnicastSubject" />
			<role name="RealSubject" element="rx.subjects.UnicastSubject$State" />
			<role name="Request()" element="rx.subjects.UnicastSubject::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.subjects.UnicastSubject::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorTimeoutBase$TimeoutSubscriber::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorSampleWithObservable$1" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorSampleWithObservable$1::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorSampleWithObservable$1::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorSkipUntil$1" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorSkipUntil$1::onError(java.lang.Throwable):void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorSkipUntil$2" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorSkipUntil$2::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorSkipUntil$2::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorWithLatestFrom$1" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorWithLatestFrom$1::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorWithLatestFrom$1::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OperatorWithLatestFrom$2" />
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Request()" element="rx.internal.operators.OperatorWithLatestFrom$2::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.internal.operators.OperatorWithLatestFrom$2::onCompleted():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.CompletableFromEmitter$FromEmitter" />
			<role name="RealSubject" element="rx.internal.subscriptions.SequentialSubscription" />
			<role name="Request()" element="rx.internal.operators.CompletableFromEmitter$FromEmitter::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler" />
			<role name="RealSubject" element="rx.subscriptions.BooleanSubscription" />
			<role name="Request()" element="rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler::unsubscribe():void" />
			<role name="Request()" element="rx.internal.schedulers.ImmediateScheduler$InnerImmediateScheduler::isUnsubscribed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler" />
			<role name="RealSubject" element="rx.subscriptions.BooleanSubscription" />
			<role name="Request()" element="rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler::unsubscribe():void" />
			<role name="Request()" element="rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler::isUnsubscribed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.schedulers.TestScheduler$InnerTestScheduler" />
			<role name="RealSubject" element="rx.subscriptions.BooleanSubscription" />
			<role name="Request()" element="rx.schedulers.TestScheduler$InnerTestScheduler::unsubscribe():void" />
			<role name="Request()" element="rx.schedulers.TestScheduler$InnerTestScheduler::isUnsubscribed():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.subscriptions.MultipleAssignmentSubscription" />
			<role name="RealSubject" element="rx.internal.subscriptions.SequentialSubscription" />
			<role name="Request()" element="rx.subscriptions.MultipleAssignmentSubscription::isUnsubscribed():boolean" />
			<role name="Request()" element="rx.subscriptions.MultipleAssignmentSubscription::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.subscriptions.SerialSubscription" />
			<role name="RealSubject" element="rx.internal.subscriptions.SequentialSubscription" />
			<role name="Request()" element="rx.subscriptions.SerialSubscription::isUnsubscribed():boolean" />
			<role name="Request()" element="rx.subscriptions.SerialSubscription::unsubscribe():void" />
		</instance>
		<instance>
			<role name="Proxy" element="rx.internal.operators.OnSubscribeRedo$5" />
			<role name="RealSubject" element="rx.internal.producers.ProducerArbiter" />
			<role name="Request()" element="rx.internal.operators.OnSubscribeRedo$5::request(long):void" />
		</instance>
	</pattern>
	<pattern name="Proxy2">
		<instance>
			<role name="Proxy" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler" />
			<role name="RealSubject" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler$ThreadPoolScheduler" />
			<role name="Subject" element="rx.Scheduler" />
			<role name="subject" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler::actualScheduler:rx.Scheduler" />
			<role name="Request()" element="com.netflix.hystrix.strategy.concurrency.HystrixContextScheduler::createWorker():rx.Scheduler$Worker" />
		</instance>
		<instance>
			<role name="RealSubject" element="rx.observers.SerializedSubscriber" />
			<role name="Subject" element="rx.Observer" />
			<role name="subject" element="rx.observers.SerializedSubscriber::s:rx.Observer" />
			<role name="Request()" element="rx.observers.SerializedSubscriber::onCompleted():void" />
			<role name="Request()" element="rx.observers.SerializedSubscriber::onError(java.lang.Throwable):void" />
			<role name="Request()" element="rx.observers.SerializedSubscriber::onNext(T):void" />
		</instance>
	</pattern>
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink" />
			<role name="successor" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink::next:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedArchaiusProperty$ChainLink" />
		</instance>
		<instance>
			<role name="Handler" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink" />
			<role name="successor" element="com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink::next:com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedProperty$ChainLink" />
		</instance>
		<instance>
			<role name="Handler" element="rx.Subscriber" />
			<role name="successor" element="rx.Subscriber::subscriber:rx.Subscriber" />
		</instance>
	</pattern>
</system>

